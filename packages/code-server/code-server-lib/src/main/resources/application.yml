spring:
  mvc.pathmatch.matching-strategy: ant_path_matcher
  application:
    name: dna-codeserver-service
    version: 1.3.11
  profile:
    active: production

  flyway:
    enabled: ${FLYWAY_ENABLED:false}
    baseline-on-migrate: ${FLYWAY_BASELINE_ON_MIGRATE:false}
    baselineVersion: ${FLYWAY_BASELINEVERSION:0}
    schemas: ${FLYWAY_SCHEMA:public}   
        
  jpa:
    database: POSTGRESQL
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        temp:
          use_jdbc_metadata_defaults: false
    hibernate:
      ddl-auto: none

  kafka:
    producer:
    properties:
      ssl:
        truststore:
          location: ${TRUSTSTORE_PATH:/XXXX/XXXX/truststore.jks}
          password: ${TRUSTSTORE_PASSWORD:XXXX}
          type: PKCS12
        keystore:
          location: ${KEYSTORE_PATH:/XXXX/XXXX/keystore.p12}
          password: ${KEYSTORE_PASSWORD:XXXX}
          type: PKCS12
      security:
          protocol: SSL
  cloud:
    stream:
      default-binder: kafka
      kafka:
        binder:
          brokers: ${NAAS_BROKER:localhost:9092}    

  datasource:
    hikari:
      connection-timeout: 4000
    platform: postgres
    url: ${API_DB_URL:jdbc:postgresql://localhost:5432/db}
    username: ${API_DB_USER:XXXX_user}
    password: ${API_DB_PASS:XXXX_pass}
    driverClassName: org.postgresql.Driver
    
dna:
  uri: ${DNA_URI:XXXXXX}

codeserver:
  userauth: ${CODESERVER_USERAUTH:XXXX}
    
authenticator:
  uri: ${AUTHENTICATOR_URI:YOUR_AUTHENTICATOR_URI} 
  uri.aws: ${AUTHENTICATOR_URI_AWS:YOUR_AUTHENTICATOR_URI_AWS} 
  api.key: ${AUTHENTICATOR_API_KEY:API_KEY}
  api.aws.key: ${AUTHENTICATOR_API_KEY_AWS:YOUR_AWS_API_KEY}

 
kafka:
  centralTopic:
    name: dnaCentralEventTopic  

server:
  port: 7979

#Cors Filter origin Domains  
allowedCorsOriginPatternUrl: ${CORS_ORIGIN_URL:http://*}

codeServer:
  gitjob.deployuri: ${CODE_SERVER_GITJOB_DEPLOY_URI:XXXX}
  gitjob.manageuri: ${CODE_SERVER_GITJOB_MANAGE_URI:XXXX}
  gitjob.pat: ${CODE_SERVER_GITJOB_PAT:XXXX}
  git.pat: ${CODE_SERVER_GIT_PAT:XXXX}
  git.orgname: ${CODE_SERVER_ORGNAME:XXXXX}
  git.orguri: ${CODE_SERVER_ORGURI:XXXXX}
  git.baseuri: ${CODE_SERVER_GIT_BASEURI:XXXXXX}
  base.uri: ${CODE_BASE_URI:XXXX}
  base.uri.aws: ${CODE_BASE_URI_AWS:YOUR_CODE_BASE_URI_AWS}
  env.ref: ${CODE_SERVER_GIT_ENVREF:dev}
  env.value: ${CODE_SERVER_GIT_ENV:Development}
  env.value.aws: ${CODE_SERVER_GIT_ENV_AWS:YOUR_AWS_ENV}
  env.url: ${CODE_SERVER_ENVURL:XXX}
  env.url.aws: ${CODE_SERVER_ENVURL_AWS:YOUR_AWS_ENV_URL}
  git.appname: ${CODE_SERVER_APPLICATION_NAME:XXXX}
  jupyter.pat: ${CODE_SERVER_JUPYTER_PAT:XXX}
  jupyter.url: ${CODE_SERVER_JUPYTER_URL:XXX}
  jupyter.url.aws: ${CODE_SERVER_JUPYTER_URL_AWS:YOUR_JUPYTER_AWS_URL}
  jupyter.pat.aws: ${CODE_SERVER_JUPYTER_PAT_AWS:YOUR_PAT_AWS}
  workspace.url: ${CODE_SERVER_WORKSPACE_URL:XXX}
  workspace.url.aws: ${CODE_SERVER_WORKSPACE_URL_AWS:YOUR_AWS_WORKSPACE_URL}
  workspace.apikey: ${CODE_SERVER_API_KEY:XXX}
  git.pid: ${CODE_SERVER_PID_USER:XXXXX}
  recipe.software.foldername: ${RECIPE_SOFTWARE_NAME:XXXX}
  recipe.software.filename: ${RECIPE_SOFTWARE_FILE_NAME:XXXX}
  run.init: ${RUN_INIT_POST_CONSTRUCT:YOUR_INIT_POST_CONSTRUCT_BOOLEAN}
  run.collab.admin: ${RUN_COLLAB_ADMIN:YOUR_COLLAB_BOOLEAN}
  collab.pid: ${COLLAB_PID:YOUR_COLLAB_PID}
  vault.baseuri: ${CODE_SERVER_VAULT_BASEURI:XXXX}
  codespace.filename: ${CODESPACE_FILE_NAME:YOUR_CODESPACE_FILE_NAME}
  technical.id: ${CODE_SERVER_TECHNICAL_USER:XXXX}

swagger.headers.authorization.token: ${SWAGGER_HEADER_AUTH:XXXXXX}
management.endpoints.web.exposure.include: loggers,health
management.endpoint.loggers.enabled: true
management.endpoint.health.probes.enabled: true
management.endpoint.health.show-details: always


logging:
  service:
    environment: ${LOGGING_ENVIRONMENT:DEV}
    path: ${LOGGING_PATH:/var/log}
  level:
    com:
      daimler:
        data:
          application: INFO
          controller.ItsmmGameController: DEBUG
    org.springframework.boot.autoconfigure.logging: INFO
    com.daimler.data.application.logging.ApplicationLoggingAspect: DEBUG
    org:
      springframework:
        web:
          client:
            RestTemplate: INFO
      hibernate:
        type:
          descriptor:
            sql: ERROR
proxy: 
  port: ${CUSTOMPROXY_PORT:XXXX}
  host: ${CUSTOMPROXY_HOST:XXXX}
  
codespace:
  recipe: ${DnARECIPE:XXXX}

kong:
   bearerOnly: ${BEARER_ONLY:XXXX}
   clientId: ${CLIENT_ID:XXXX}
   clientSecret: ${CLIENT_SECRET:XXXX}
   discovery: ${DISCOVERY:XXXX}
   introspectionEndpoint: ${INTROSPECTION_ENDPOINT:XXXX}
   introspectionEndpointAuthMethod: ${INTROSPECTION_ENDPOINT_AUTH_METHOD:XXXX}
   logoutPath: ${LOGOUT_PATH:XXXX}
   realm: ${REALM:XXXX}
   redirectAfterLogoutUri: ${REDIRECT_AFTER_LOGOUT_URI:XXXX}
   redirectUriPath: ${REDIRECT_URI_PATH:XXXX}
   revokeTokensOnLogout: ${REVOKE_TOKENS_ON_LOGOUT:XXXX}
   responseType: ${RESPONSE_TYPE:XXXX}
   scope: ${SCOPE:XXXX}
   sslVerify: ${SSL_VERIFY:XXXX}
   tokenEndpointAuthMethod: ${TOKEN_ENDPOINT_AUTH_METHOD:XXXX}  
   algorithm: ${ALGORITHM:XXXX}
   secret: ${SECRET:XXXX}
   clientHomeUrl: ${CLIENT_HOME_URL:XXXX}
   privateKeyFilePath: ${PRIVATE_KEY_FILEPATH:XXXX}
   expiresIn: ${EXPIRES_IN:XXXX}
   jwtClientId: ${JWT_CLIENT_ID:XXXX}
   jwtClientSecret: ${JWT_CLIENT_SECRET:XXXX}
   uiRecipesToUseOidc: ${UI_RECIPES_TO_USE_OIDC:XXXX}
   enableAuthTokenIntrospection: ${enableAuthTokenIntrospection:XXXX}
   csvalidateurl: ${csvalidateurl:XXXX}
   logType: ${LOG_TYPE:XXXX}
   wsconfigurl: ${WSCONFIGURL:XXXX}
   applicationName: ${APPLICATION_NAME:XXXX}
   poolID: ${POOL_ID:XXXX}
   userinfoIntrospectionUri: ${USERINFO_INTROSPECTION_URL:XXXX}
   enableUserinfoIntrospection: ${ENABLE_USERINFO_INTROSPECTION:XXXX}
   authoriserBearerOnly: ${AUTHORISER_BEARER_ONLY:XXXX}
   authoriserClientId: ${AUTHORISER_CLIENT_ID:XXXX}
   authoriserClientSecret: ${AUTHORISER_CLIENT_SECRET:XXXX}
   authoriserIntrospectionEndpointAuthMethod: ${AUTHORISER_INTROSPECTION_ENDPOINT_AUTH_METHOD:XXXX}
   authoriserScope: ${AUTHORISER_SCOPE:XXXX}
   authoriserRedirectAfterLogoutUri: ${AUTHORISER_REDIRECT_AFTER_LOGOUT_URI:XXXX}
   authoriserDiscovery: ${AUTHORISER_DISCOVERY:XXXX}
   authoriserIntrospectionEndpoint: ${AUTHORISER_INTROSPECTION_ENDPOINT:XXXX}

workspace:
  migrate: ${MIGRATE_WORKSPACE:YOUR_MIGRATE_BOOLEAN}    
  callKongApisFromBackend: ${CALL_KONG_APIS_FROM_BACKEND:XXXX}
