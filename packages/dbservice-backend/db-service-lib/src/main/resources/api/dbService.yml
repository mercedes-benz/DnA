# LICENSE START
#
# MIT License
#
# Copyright (c) 2019 Daimler TSS GmbH
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
# LICENSE END
#
#-----------------------------------------------------------------------------------------------------
#  **
#  ** File Name  : dbService.yaml
#  **
#  ** Module     : core
#  **

#  -------------------------------------------------------------------------------------------------------
#
#  CHANGE HISTORY
#
#  Created By         :  snehaks
#
#  Bug Number         :
#  Changed By         :
#  Change Description :
#  Change On          :
#  Search String      :
#
#  -------------------------------------------------------------------------------------------------------


swagger: "2.0"
info:
  version: "1.0.0"
  title: "Chronos Workspace Service"
host: "localhost:8989"
basePath: "/api/1.0"
consumes:
  - "application/json"
produces:
  - "application/json"
tags:
  - name: "forecasts"
    description: "This service is used to maintain forecasts information."

schemes:
  - "https"

paths:
  
  # Fetch all valid userinfo or by intent
  #
  #  supported http methods GET, POST, PUT
  #
  # path example ../forecasts
  
  /forecasts:
    get:
      tags:
        - "forecast-projects"
      summary: "Get all forecast projects for the user."
      description:  "Get all forecasts projects for the user."
      operationId: "getAll"
      parameters:
        - name: offset
          in: query
          description: page number from which listing of forecasts should start. Offset. Example 2
          required: false
          type: integer
        - name: limit
          in: query
          description: page size to limit the number of forecasts, Example 15
          required: false
          type: integer
      responses:
        201:
          description: "Returns message of success or failure"
          schema:
            $ref: "#/definitions/ForecastCollectionVO"
        204:
          description: "Fetch complete, no content found."
        400:
          description: "Bad request."
        401:
          description: "Request does not have sufficient credentials."
        403:
          description: "Request is not authorized."
        405:
          description: "Method not allowed"
        500:
          description: "Internal error"
    
    post:
      tags:
        - "forecast-projects"
      summary: "Initialize/Create forecast project for user."
      description: "Create forecast project for user "
      operationId: "createForecastProject"
      parameters:
        - name: "forecastRequestVO"
          in: "body"
          description: "Request Body that contains data required for intialize chronos project for user"
          required: true
          schema:
            $ref: "#/definitions/ForecastProjectCreateRequestWrapperVO"
      responses:
        201:
          description: "Returns message of success or failure "
          schema:
            $ref: "#/definitions/ForecastProjectResponseVO"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/GenericMessage"
        401:
          description: "Request does not have sufficient credentials."
        403:
          description: "Request is not authorized."
        405:
          description: "Method not allowed"
        500:
          description: "Internal error"