buildscript {
    ext {
        springBootVersion = "2.4.4"
        releaseVersion = "2.0.0"
    }
    repositories {
        mavenLocal()
        mavenCentral()
		gradlePluginPortal()
		maven {
		  url "https://plugins.gradle.org/m2/"
		}
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        //classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2")
		classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.2.0")
		classpath("gradle.plugin.org.hidetake:gradle-swagger-generator-plugin:2.18.2")
		classpath("com.commercehub:gradle-cucumber-jvm-plugin:0.14")
		classpath("org.apache.maven.plugins:maven-dependency-plugin:3.1.2")
    }

}


plugins {
    // the plugins DSL is replacing apply plugin over time for Java-plugins. It is therefore favoured over the legacy "apply plugin:" approach
    id "java"
    id "eclipse"
    //id 'org.hidetake.swagger.generator' version '2.18.2'
    id "jacoco"
    //id "org.sonarqube" version "2.6.2"
	id "org.sonarqube" version "3.2.0"
    //id 'com.commercehub.cucumber-jvm' version '0.13'
	//id "io.freefair.lombok" version "4.1.6"
}

apply plugin: "io.spring.dependency-management"
apply plugin: "org.springframework.boot"
apply plugin: "jacoco"
apply plugin: "cucumber-jvm"
//apply plugin: 'maven'
apply plugin: "maven-publish"
apply plugin: 'groovy'
apply plugin: "org.sonarqube"
apply plugin: "org.hidetake.swagger.generator"

repositories {
        mavenLocal()
        mavenCentral()
		gradlePluginPortal()
		maven {
		  url "https://plugins.gradle.org/m2/"
		}
}


group 'com.daimler.data'
version = releaseVersion

sourceCompatibility = 1.17
targetCompatibility = 1.17
tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }

//__________________________________________________________//
//_____________________ SWAGGER CONFIGURATION ______________//
swaggerSources {
	
    language {
        def languageyaml = "${rootDir}/dnambc-lib/src/main/resources/api/Language.yaml"
        def languageJson = "${rootDir}/dnambc-lib/src/main/resources/api/Language.json"
		
        inputFile = file(languageyaml)

        def ignoreFile = "${rootDir}/dnambc-lib/src/main/resources/api/.swagger-codegen-ignore"

        code {
            language = 'spring'
            configFile = file(languageJson)
            rawOptions = ['--ignore-file-override', ignoreFile]

            components = ['models', 'apis']
            //dependsOn validation
        }
    }

    location {
        def locationyaml = "${rootDir}/dnambc-lib/src/main/resources/api/Location.yaml"
        def locationJson = "${rootDir}/dnambc-lib/src/main/resources/api/Location.json"
        inputFile = file(locationyaml)

        def ignoreFile = "${rootDir}/dnambc-lib/src/main/resources/api/.swagger-codegen-ignore"

        code {
            language = 'spring'
            configFile = file(locationJson)
            rawOptions = ['--ignore-file-override', ignoreFile]

            components = ['models', 'apis']
            //dependsOn validation
        }
    }

    algorithm {
        def algorithmyaml = "${rootDir}/dnambc-lib/src/main/resources/api/Algorithm.yaml"
        def algorithmJson = "${rootDir}/dnambc-lib/src/main/resources/api/Algorithm.json"
        inputFile = file(algorithmyaml)

        def ignoreFile = "${rootDir}/dnambc-lib/src/main/resources/api/.swagger-codegen-ignore"

        code {
            language = 'spring'
            configFile = file(algorithmJson)
            rawOptions = ['--ignore-file-override', ignoreFile]

            components = ['models', 'apis']
            //dependsOn validation
        }
    }

    analyticsSolution {
        def analyticsSolutionyaml = "${rootDir}/dnambc-lib/src/main/resources/api/AnalyticsSolution.yaml"
        def analyticsSolutionJson = "${rootDir}/dnambc-lib/src/main/resources/api/AnalyticsSolution.json"
        inputFile = file(analyticsSolutionyaml)

        def ignoreFile = "${rootDir}/dnambc-lib/src/main/resources/api/.swagger-codegen-ignore"

        code {
            language = 'spring'
            configFile = file(analyticsSolutionJson)
            rawOptions = ['--ignore-file-override', ignoreFile]

            components = ['models', 'apis']
            //dependsOn validation
        }
    }
    
    customerJourneyPhase {
        def customerJourneyPhaseyaml = "${rootDir}/dnambc-lib/src/main/resources/api/CustomerJourneyPhase.yaml"
        def customerJourneyPhaseJson = "${rootDir}/dnambc-lib/src/main/resources/api/CustomerJourneyPhase.json"
        inputFile = file(customerJourneyPhaseyaml)

        def ignoreFile = "${rootDir}/dnambc-lib/src/main/resources/api/.swagger-codegen-ignore"

        code {
            language = 'spring'
            configFile = file(customerJourneyPhaseJson)
            rawOptions = ['--ignore-file-override', ignoreFile]

            components = ['models', 'apis']
            //dependsOn validation
        }
    }
    
    marketingCommunicationChannel {
        def marketingCommunicationChannelyaml = "${rootDir}/dnambc-lib/src/main/resources/api/MarketingCommunicationChannel.yaml"
        def marketingCommunicationChannelJson = "${rootDir}/dnambc-lib/src/main/resources/api/MarketingCommunicationChannel.json"
        inputFile = file(marketingCommunicationChannelyaml)

        def ignoreFile = "${rootDir}/dnambc-lib/src/main/resources/api/.swagger-codegen-ignore"

        code {
            language = 'spring'
            configFile = file(marketingCommunicationChannelJson)
            rawOptions = ['--ignore-file-override', ignoreFile]

            components = ['models', 'apis']
            //dependsOn validation
        }
    }
    
    marketingRole {
        def marketingRoleyaml = "${rootDir}/dnambc-lib/src/main/resources/api/MarketingRole.yaml"
        def marketingRoleJson = "${rootDir}/dnambc-lib/src/main/resources/api/MarketingRole.json"
        inputFile = file(marketingRoleyaml)

        def ignoreFile = "${rootDir}/dnambc-lib/src/main/resources/api/.swagger-codegen-ignore"

        code {
            language = 'spring'
            configFile = file(marketingRoleJson)
            rawOptions = ['--ignore-file-override', ignoreFile]

            components = ['models', 'apis']
            //dependsOn validation
        }
    }
       
    datasource {
        def datasourceyaml = "${rootDir}/dnambc-lib/src/main/resources/api/DataSource.yaml"
        def datasourceJson = "${rootDir}/dnambc-lib/src/main/resources/api/DataSource.json"
        inputFile = file(datasourceyaml)

        def ignoreFile = "${rootDir}/dnambc-lib/src/main/resources/api/.swagger-codegen-ignore"

        code {
            language = 'spring'
            configFile = file(datasourceJson)
            rawOptions = ['--ignore-file-override', ignoreFile]

            components = ['models', 'apis']
            //dependsOn validation
        }
    }

    datavolume {
        def datavolumeyaml = "${rootDir}/dnambc-lib/src/main/resources/api/DataVolume.yaml"
        def datavolumeJson = "${rootDir}/dnambc-lib/src/main/resources/api/DataVolume.json"
        inputFile = file(datavolumeyaml)

        def ignoreFile = "${rootDir}/dnambc-lib/src/main/resources/api/.swagger-codegen-ignore"

        code {
            language = 'spring'
            configFile = file(datavolumeJson)
            rawOptions = ['--ignore-file-override', ignoreFile]

            components = ['models', 'apis']
            //dependsOn validation
        }
    }

    division {
        def divisionyaml = "${rootDir}/dnambc-lib/src/main/resources/api/Division.yaml"
        def divisionJson = "${rootDir}/dnambc-lib/src/main/resources/api/Division.json"
        inputFile = file(divisionyaml)

        def ignoreFile = "${rootDir}/dnambc-lib/src/main/resources/api/.swagger-codegen-ignore"

        code {
            language = 'spring'
            configFile = file(divisionJson)
            rawOptions = ['--ignore-file-override', ignoreFile]

            components = ['models', 'apis']
            //dependsOn validation
        }
    }
	
	divisionAudit {
        def divisionAudityaml = "${rootDir}/dnambc-lib/src/main/resources/api/DivisionAudit.yaml"
        def divisionAuditJson = "${rootDir}/dnambc-lib/src/main/resources/api/DivisionAudit.json"
        inputFile = file(divisionAudityaml)

        def ignoreFile = "${rootDir}/dnambc-lib/src/main/resources/api/.swagger-codegen-ignore"

        code {
            language = 'spring'
            configFile = file(divisionAuditJson)
            rawOptions = ['--ignore-file-override', ignoreFile]

            components = ['models', 'apis']
            //dependsOn validation
        }
    }

    platform {
        def platformyaml = "${rootDir}/dnambc-lib/src/main/resources/api/Platform.yaml"
        def platformJson = "${rootDir}/dnambc-lib/src/main/resources/api/Platform.json"
        inputFile = file(platformyaml)

        def ignoreFile = "${rootDir}/dnambc-lib/src/main/resources/api/.swagger-codegen-ignore"

        code {
            language = 'spring'
            configFile = file(platformJson)
            rawOptions = ['--ignore-file-override', ignoreFile]

            components = ['models', 'apis']
            //dependsOn validation
        }
    }

    result {
        def resultyaml = "${rootDir}/dnambc-lib/src/main/resources/api/Result.yaml"
        def resultJson = "${rootDir}/dnambc-lib/src/main/resources/api/Result.json"
        inputFile = file(resultyaml)

        def ignoreFile = "${rootDir}/dnambc-lib/src/main/resources/api/.swagger-codegen-ignore"

        code {
            language = 'spring'
            configFile = file(resultJson)
            rawOptions = ['--ignore-file-override', ignoreFile]

            components = ['models', 'apis']
            //dependsOn validation
        }
    }

    visualization {
        def visualizationyaml = "${rootDir}/dnambc-lib/src/main/resources/api/Visualization.yaml"
        def visualizationJson = "${rootDir}/dnambc-lib/src/main/resources/api/Visualization.json"
        inputFile = file(visualizationyaml)

        def ignoreFile = "${rootDir}/dnambc-lib/src/main/resources/api/.swagger-codegen-ignore"

        code {
            language = 'spring'
            configFile = file(visualizationJson)
            rawOptions = ['--ignore-file-override', ignoreFile]

            components = ['models', 'apis']
            //dependsOn validation
        }
    }

    topic {
        def topicyaml = "${rootDir}/dnambc-lib/src/main/resources/api/Topic.yaml"
        def topicJson = "${rootDir}/dnambc-lib/src/main/resources/api/Topic.json"
        inputFile = file(topicyaml)

        def ignoreFile = "${rootDir}/dnambc-lib/src/main/resources/api/.swagger-codegen-ignore"

        code {
            language = 'spring'
            configFile = file(topicJson)
            rawOptions = ['--ignore-file-override', ignoreFile]

            components = ['models', 'apis']
            //dependsOn validation
        }
    }

    userrole {
        def userroleyaml = "${rootDir}/dnambc-lib/src/main/resources/api/UserRole.yaml"
        def userroleJson = "${rootDir}/dnambc-lib/src/main/resources/api/UserRole.json"
        inputFile = file(userroleyaml)

        def ignoreFile = "${rootDir}/dnambc-lib/src/main/resources/api/.swagger-codegen-ignore"

        code {
            language = 'spring'
            configFile = file(userroleJson)
            rawOptions = ['--ignore-file-override', ignoreFile]

            components = ['models', 'apis']
            //dependsOn validation
        }
    }

    phase {
        def phaseyaml = "${rootDir}/dnambc-lib/src/main/resources/api/Phase.yaml"
        def phaseJson = "${rootDir}/dnambc-lib/src/main/resources/api/Phase.json"
        inputFile = file(phaseyaml)

        def ignoreFile = "${rootDir}/dnambc-lib/src/main/resources/api/.swagger-codegen-ignore"

        code {
            language = 'spring'
            configFile = file(phaseJson)
            rawOptions = ['--ignore-file-override', ignoreFile]

            components = ['models', 'apis']
            //dependsOn validation
        }
    }

    projectstatus {
        def projectstatusyaml = "${rootDir}/dnambc-lib/src/main/resources/api/ProjectStatus.yaml"
        def projectstatusJson = "${rootDir}/dnambc-lib/src/main/resources/api/ProjectStatus.json"
        inputFile = file(projectstatusyaml)

        def ignoreFile = "${rootDir}/dnambc-lib/src/main/resources/api/.swagger-codegen-ignore"

        code {
            language = 'spring'
            configFile = file(projectstatusJson)
            rawOptions = ['--ignore-file-override', ignoreFile]

            components = ['models', 'apis']
            //dependsOn validation
        }
    }

    userinfo {
        def userinfoyaml = "${rootDir}/dnambc-lib/src/main/resources/api/UserInfo.yaml"
        def userinfoJson = "${rootDir}/dnambc-lib/src/main/resources/api/UserInfo.json"
        inputFile = file(userinfoyaml)

        def ignoreFile = "${rootDir}/dnambc-lib/src/main/resources/api/.swagger-codegen-ignore"

        code {
            language = 'spring'
            configFile = file(userinfoJson)
            rawOptions = ['--ignore-file-override', ignoreFile]

            components = ['models', 'apis']
            //dependsOn validation
        }
    }

    tag {
        def tagyaml = "${rootDir}/dnambc-lib/src/main/resources/api/Tag.yaml"
        def tagJson = "${rootDir}/dnambc-lib/src/main/resources/api/Tag.json"
        inputFile = file(tagyaml)

        def ignoreFile = "${rootDir}/dnambc-lib/src/main/resources/api/.swagger-codegen-ignore"

        code {
            language = 'spring'
            configFile = file(tagJson)
            rawOptions = ['--ignore-file-override', ignoreFile]

            components = ['models', 'apis']
            //dependsOn validation
        }
    }

    solution {
        def solutionyaml = "${rootDir}/dnambc-lib/src/main/resources/api/Solution.yaml"
        def solutionJson = "${rootDir}/dnambc-lib/src/main/resources/api/Solution.json"
        inputFile = file(solutionyaml)

        def ignoreFile = "${rootDir}/dnambc-lib/src/main/resources/api/.swagger-codegen-ignore"

        code {
            language = 'spring'
            configFile = file(solutionJson)
            rawOptions = ['--ignore-file-override', ignoreFile]

            components = ['models', 'apis']
            //dependsOn validation
        }
    }

    widget {
        def widgetyaml = "${rootDir}/dnambc-lib/src/main/resources/api/Widget.yaml"
        def widgetJson = "${rootDir}/dnambc-lib/src/main/resources/api/Widget.json"
        inputFile = file(widgetyaml)

        def ignoreFile = "${rootDir}/dnambc-lib/src/main/resources/api/.swagger-codegen-ignore"

        code {
            language = 'spring'
            configFile = file(widgetJson)
            rawOptions = ['--ignore-file-override', ignoreFile]

            components = ['models', 'apis']
            //dependsOn validation
        }
    }

    userWidgetPreference {
        def userWidgetPreferenceYaml = "${rootDir}/dnambc-lib/src/main/resources/api/UserWidgetPreference.yaml"
        def userWidgetPreferenceJson = "${rootDir}/dnambc-lib/src/main/resources/api/UserWidgetPreference.json"
        inputFile = file(userWidgetPreferenceYaml)

        def ignoreFile = "${rootDir}/dnambc-lib/src/main/resources/api/.swagger-codegen-ignore"

        code {
            language = 'spring'
            configFile = file(userWidgetPreferenceJson)
            rawOptions = ['--ignore-file-override', ignoreFile]

            components = ['models', 'apis']
            //dependsOn validation
        }
    }
    
   userNotificationPreference {
        def userNotificationPreferenceYaml = "${rootDir}/dnambc-lib/src/main/resources/api/UserNotificationPreference.yaml"
        def userNotificationPreferenceJson = "${rootDir}/dnambc-lib/src/main/resources/api/UserNotificationPreference.json"
        inputFile = file(userNotificationPreferenceYaml)

        def ignoreFile = "${rootDir}/lib/src/main/resources/api/.swagger-codegen-ignore"

        code {
            language = 'spring'
            configFile = file(userNotificationPreferenceJson)
            rawOptions = ['--ignore-file-override', ignoreFile]

            components = ['models', 'apis']
            //dependsOn validation
        }
    }
    
   logoDetails {
        def logoYaml = "${rootDir}/dnambc-lib/src/main/resources/api/Logo.yaml"
        def logoJson = "${rootDir}/dnambc-lib/src/main/resources/api/Logo.json"
        inputFile = file(logoYaml)

        def ignoreFile = "${rootDir}/dnambc-lib/src/main/resources/api/.swagger-codegen-ignore"

        code {
            language = 'spring'
            configFile = file(logoJson)
            rawOptions = ['--ignore-file-override', ignoreFile]

            components = ['models', 'apis']
            //dependsOn validation
        }
    }


    attachment {
        def attachmentYaml = "${rootDir}/dnambc-lib/src/main/resources/api/Attachment.yaml"
        def attachmentJson = "${rootDir}/dnambc-lib/src/main/resources/api/Attachment.json"
        inputFile = file(attachmentYaml)

        def ignoreFile = "${rootDir}/dnambc-lib/src/main/resources/api/.swagger-codegen-ignore"

        code {
            language = 'spring'
            configFile = file(attachmentJson)
            rawOptions = ['--ignore-file-override', ignoreFile]

            components = ['models', 'apis']
            //dependsOn validation
        }
    }

    relatedProduct {
        def relatedProductYaml = "${rootDir}/dnambc-lib/src/main/resources/api/RelatedProduct.yaml"
        def relatedProductJson = "${rootDir}/dnambc-lib/src/main/resources/api/RelatedProduct.json"
        inputFile = file(relatedProductYaml)

        def ignoreFile = "${rootDir}/dnambc-lib/src/main/resources/api/.swagger-codegen-ignore"

        code {
            language = 'spring'
            configFile = file(relatedProductJson)
            rawOptions = ['--ignore-file-override', ignoreFile]

            components = ['models', 'apis']
            //dependsOn validation
        }
     }
     
     lov {
        def lovYaml = "${rootDir}/dnambc-lib/src/main/resources/api/Lov.yaml"
        def lovJson = "${rootDir}/dnambc-lib/src/main/resources/api/Lov.json"
        inputFile = file(lovYaml)
        def ignoreFile = "${rootDir}/dnambc-lib/src/main/resources/api/.swagger-codegen-ignore"
        code {
            language = 'spring'
            configFile = file(lovJson)
            rawOptions = ['--ignore-file-override', ignoreFile]

            components = ['models', 'apis']
            //dependsOn validation
           }
      }
      
      
     notebook {
        def notebookYaml = "${rootDir}/dnambc-lib/src/main/resources/api/Notebook.yaml"
        def notebookJson = "${rootDir}/dnambc-lib/src/main/resources/api/Notebook.json"
        inputFile = file(notebookYaml)

        def ignoreFile = "${rootDir}/dnambc-lib/src/main/resources/api/.swagger-codegen-ignore"

        code {
            language = 'spring'
            configFile = file(notebookJson)
            rawOptions = ['--ignore-file-override', ignoreFile]

            components = ['models', 'apis']
            //dependsOn validation
        }
    }
	itsmmgame {
        def itsmmgameYaml = "${rootDir}/dnambc-lib/src/main/resources/api/itsmmgame.yaml"
        def itsmmgameJson = "${rootDir}/dnambc-lib/src/main/resources/api/itsmmgame.json"
        inputFile = file(itsmmgameYaml)

        def ignoreFile = "${rootDir}/dnambc-lib/src/main/resources/api/.swagger-codegen-ignore"

        code {
            language = 'spring'
            configFile = file(itsmmgameJson)
            rawOptions = ['--ignore-file-override', ignoreFile]

            components = ['models', 'apis']
            //dependsOn validation
        }
    }
    
    dataiku {
        def dataikuYaml = "${rootDir}/dnambc-lib/src/main/resources/api/Dataiku.yaml"
        def dataikuJson = "${rootDir}/dnambc-lib/src/main/resources/api/Dataiku.json"
        inputFile = file(dataikuYaml)

        def ignoreFile = "${rootDir}/dnambc-lib/src/main/resources/api/.swagger-codegen-ignore"

        code {
            language = 'spring'
            configFile = file(dataikuJson)
            rawOptions = ['--ignore-file-override', ignoreFile]
            components = ['models', 'apis']
            //dependsOn validation
        }
    }
    
    dashboard {
        def dashboardYaml = "${rootDir}/dnambc-lib/src/main/resources/api/Dashboard.yaml"
        def dashboardJson = "${rootDir}/dnambc-lib/src/main/resources/api/Dashboard.json"
        inputFile = file(dashboardYaml)
        def ignoreFile = "${rootDir}/dnambc-lib/src/main/resources/api/.swagger-codegen-ignore"
        code {
            language = 'spring'
            configFile = file(dashboardJson)
            rawOptions = ['--ignore-file-override', ignoreFile]
            components = ['models', 'apis']
        }
    }  
    
    skill {
        def skillYaml = "${rootDir}/dnambc-lib/src/main/resources/api/Skill.yaml"
        def skillJson = "${rootDir}/dnambc-lib/src/main/resources/api/Skill.json"
        inputFile = file(skillYaml)
        def ignoreFile = "${rootDir}/dnambc-lib/src/main/resources/api/.swagger-codegen-ignore"
        code {
            language = 'spring'
            configFile = file(skillJson)
            rawOptions = ['--ignore-file-override', ignoreFile]
            components = ['models', 'apis']
        }
    }  

    promptCraftSubscriptions {
        def promptCraftSubscriptionsYaml = "${rootDir}/dnambc-lib/src/main/resources/api/PromptCraftSubscriptions.yaml"
        def promptCraftSubscriptionsJson = "${rootDir}/dnambc-lib/src/main/resources/api/PromptCraftSubscriptions.json"
        inputFile = file(promptCraftSubscriptionsYaml)

        def ignoreFile = "${rootDir}/dnambc-lib/src/main/resources/api/.swagger-codegen-ignore"

        code {
            language = 'spring'
            configFile = file(promptCraftSubscriptionsJson)
            rawOptions = ['--ignore-file-override', ignoreFile]

            components = ['models', 'apis']
            //dependsOn validation
        }
    }

}


compileJava {
    dependsOn processResources
    dependsOn swaggerSources.language.code
    source "${swaggerSources.language.code.outputDir}/src/main/java"
    dependsOn swaggerSources.location.code
    source "${swaggerSources.location.code.outputDir}/src/main/java"
    dependsOn swaggerSources.algorithm.code
    source "${swaggerSources.algorithm.code.outputDir}/src/main/java"
    dependsOn swaggerSources.analyticsSolution.code
    source "${swaggerSources.analyticsSolution.code.outputDir}/src/main/java"
    dependsOn swaggerSources.customerJourneyPhase.code
    source "${swaggerSources.customerJourneyPhase.code.outputDir}/src/main/java"
    dependsOn swaggerSources.marketingCommunicationChannel.code
    source "${swaggerSources.marketingCommunicationChannel.code.outputDir}/src/main/java"
    dependsOn swaggerSources.marketingRole.code
    source "${swaggerSources.marketingRole.code.outputDir}/src/main/java"    
    dependsOn swaggerSources.datasource.code
    source "${swaggerSources.datasource.code.outputDir}/src/main/java"
    dependsOn swaggerSources.datavolume.code
    source "${swaggerSources.datavolume.code.outputDir}/src/main/java"
    dependsOn swaggerSources.division.code
    source "${swaggerSources.division.code.outputDir}/src/main/java"
	dependsOn swaggerSources.divisionAudit.code
    source "${swaggerSources.divisionAudit.code.outputDir}/src/main/java"
    dependsOn swaggerSources.platform.code
    source "${swaggerSources.platform.code.outputDir}/src/main/java"
    dependsOn swaggerSources.result.code
    source "${swaggerSources.result.code.outputDir}/src/main/java"
    dependsOn swaggerSources.visualization.code
    source "${swaggerSources.visualization.code.outputDir}/src/main/java"
    dependsOn swaggerSources.topic.code
    source "${swaggerSources.topic.code.outputDir}/src/main/java"
    dependsOn swaggerSources.userrole.code
    source "${swaggerSources.userrole.code.outputDir}/src/main/java"
    dependsOn swaggerSources.phase.code
    source "${swaggerSources.phase.code.outputDir}/src/main/java"
    dependsOn swaggerSources.projectstatus.code
    source "${swaggerSources.projectstatus.code.outputDir}/src/main/java"
    dependsOn swaggerSources.userinfo.code
    source "${swaggerSources.userinfo.code.outputDir}/src/main/java"
    dependsOn swaggerSources.tag.code
    source "${swaggerSources.tag.code.outputDir}/src/main/java"
    dependsOn swaggerSources.solution.code
    source "${swaggerSources.solution.code.outputDir}/src/main/java"
    dependsOn swaggerSources.widget.code
    source "${swaggerSources.widget.code.outputDir}/src/main/java"
    dependsOn swaggerSources.userWidgetPreference.code
    source "${swaggerSources.userWidgetPreference.code.outputDir}/src/main/java"
    dependsOn swaggerSources.userNotificationPreference.code
    source "${swaggerSources.userNotificationPreference.code.outputDir}/src/main/java"
    dependsOn swaggerSources.attachment.code
    source "${swaggerSources.attachment.code.outputDir}/src/main/java"
    dependsOn swaggerSources.relatedProduct.code
    source "${swaggerSources.relatedProduct.code.outputDir}/src/main/java"
	dependsOn swaggerSources.lov.code
    source "${swaggerSources.lov.code.outputDir}/src/main/java"
    dependsOn swaggerSources.logoDetails.code
    source "${swaggerSources.logoDetails.code.outputDir}/src/main/java"
    dependsOn swaggerSources.notebook.code
    source "${swaggerSources.notebook.code.outputDir}/src/main/java"
	dependsOn swaggerSources.itsmmgame.code
    source "${swaggerSources.itsmmgame.code.outputDir}/src/main/java"
    dependsOn swaggerSources.dataiku.code
    source "${swaggerSources.dataiku.code.outputDir}/src/main/java"
    dependsOn swaggerSources.dashboard.code
    source "${swaggerSources.dashboard.code.outputDir}/src/main/java"
    dependsOn swaggerSources.skill.code
    source "${swaggerSources.skill.code.outputDir}/src/main/java"
    dependsOn swaggerSources.promptCraftSubscriptions.code
    source "${swaggerSources.promptCraftSubscriptions.code.outputDir}/src/main/java"
}

sourceSets {
    unitTest {
        java { srcDir 'src/test/groovy' }
        resources { srcDir 'src/test/resources' }
        compileClasspath += sourceSets.main.runtimeClasspath
    }
    main {
        java { srcDirs += "${swaggerSources.language.code.outputDir}/src/main/java" }
        java { srcDirs += "${swaggerSources.location.code.outputDir}/src/main/java" }
        java { srcDirs += "${swaggerSources.algorithm.code.outputDir}/src/main/java" }
        java { srcDirs += "${swaggerSources.analyticsSolution.code.outputDir}/src/main/java" }
        java { srcDirs += "${swaggerSources.customerJourneyPhase.code.outputDir}/src/main/java" }
        java { srcDirs += "${swaggerSources.marketingCommunicationChannel.code.outputDir}/src/main/java" }
        java { srcDirs += "${swaggerSources.marketingRole.code.outputDir}/src/main/java" }
        java { srcDirs += "${swaggerSources.datasource.code.outputDir}/src/main/java" }
        java { srcDirs += "${swaggerSources.datavolume.code.outputDir}/src/main/java" }
        java { srcDirs += "${swaggerSources.division.code.outputDir}/src/main/java" }
        java { srcDirs += "${swaggerSources.divisionAudit.code.outputDir}/src/main/java" }
        java { srcDirs += "${swaggerSources.platform.code.outputDir}/src/main/java" }
        java { srcDirs += "${swaggerSources.result.code.outputDir}/src/main/java" }
        java { srcDirs += "${swaggerSources.visualization.code.outputDir}/src/main/java" }
        java { srcDirs += "${swaggerSources.topic.code.outputDir}/src/main/java" }
        java { srcDirs += "${swaggerSources.userrole.code.outputDir}/src/main/java" }
        java { srcDirs += "${swaggerSources.phase.code.outputDir}/src/main/java" }
        java { srcDirs += "${swaggerSources.projectstatus.code.outputDir}/src/main/java" }
        java { srcDirs += "${swaggerSources.userinfo.code.outputDir}/src/main/java" }
        java { srcDirs += "${swaggerSources.tag.code.outputDir}/src/main/java" }
        java { srcDirs += "${swaggerSources.solution.code.outputDir}/src/main/java" }
        java { srcDirs += "${swaggerSources.widget.code.outputDir}/src/main/java" }
        java { srcDirs += "${swaggerSources.userWidgetPreference.code.outputDir}/src/main/java" }
        java { srcDirs += "${swaggerSources.userNotificationPreference.code.outputDir}/src/main/java" }
        java { srcDirs += "${swaggerSources.attachment.code.outputDir}/src/main/java" }
        java { srcDirs += "${swaggerSources.relatedProduct.code.outputDir}/src/main/java"}
        java { srcDirs += "${swaggerSources.lov.code.outputDir}/src/main/java"}
        java { srcDirs += "${swaggerSources.logoDetails.code.outputDir}/src/main/java" }
		java { srcDirs += "${swaggerSources.notebook.code.outputDir}/src/main/java"}
		java { srcDirs += "${swaggerSources.itsmmgame.code.outputDir}/src/main/java"}
		java { srcDirs += "${swaggerSources.dataiku.code.outputDir}/src/main/java"}	
		java { srcDirs += "${swaggerSources.dashboard.code.outputDir}/src/main/java"}
		java { srcDirs += "${swaggerSources.skill.code.outputDir}/src/main/java"}
        java { srcDirs += "${swaggerSources.promptCraftSubscriptions.code.outputDir}/src/main/java"}
    }
}

//__________________________________________________________//
//_____________ TEST CONFIG SETTINGS AREA __________________//
test {
    reports {
        junitXml.enabled = true
        html.enabled = true
    }
    testLogging { // Show that tests are run in the command-line output
        events 'passed' // 'started' is also an option
    }
}

//Ensure that the HTML reports of unit and integration tests are written to different directories.
tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}


/*
//__________________________________________________________//
//_________________ CUCUMBER CONFIG AREA  _________________//
addCucumberSuite 'cucumberTest'

cucumber {
	maxParallelForks = 1
}
cucumberTest {
  group = "Verification"
  description 'Runs the Acceptance Tests via connecting to a running system.'
  stepDefinitionRoots = ['classpath:daimler/data']
  junitReport = true
  tags = ['~@WIP']
  if (project.hasProperty('cucumberTags')) {
	  tags = [cucumberTags]
  }
  if (project.hasProperty('hostname')) {
   systemProperties = [ host: hostname, port: port ]
   }
   if(project.hasProperty('sshost')){
   systemProperties['sshost'] = sshost
   }
   if(project.hasProperty('ssport')){
   systemProperties['ssport'] = ssport
   }
   if(project.hasProperty('dbhost')){
   systemProperties['dbhost'] = dbhost
   }
   else {
   if (project.hasProperty('hostname')) {
   systemProperties['dbhost'] = hostname
   }
   }
   if(project.hasProperty('dbport')){
   systemProperties['dbport'] = dbport
   }
}
//needed to do this so we only display this message if the cucumberTest task was run
cucumberTest.doLast {
	if (tasks.cucumberTest.didWork) {
		println 'Running Cucumber tests with tag of: ' + tags
	}
}
*/


/*
//__________________________________________________________//
//___________________ JACOCO PLUGIN CONFIG AREA ____________//
jacoco { toolVersion = "0.7.9" }
jacocoTestReport {
  group = "Reporting"
  reports {
    xml.enabled true
    html.destination "${buildDir}/reports/coverage"
  }
}
*/
sonarqube {
    properties {
        property "sonar.projectName", "Data@MBC Backend"
        property "sonar.projectKey", "org.sonarqube:java-gradle-simple"
        property "sonar.jacoco.reportPath", "${project.buildDir}/jacoco/test.exec"
    }
}

configurations {
    cucumberTestCompile.extendsFrom testCompile
    cucumberTestRuntime.extendsFrom testRuntime
    /*contractTestCompile.extendsFrom testCompile
    contractTestRuntime.extendsFrom testRuntime*/
	//implementation
}


dependencies {

	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: '2.4.0'
    
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-stream', version: '3.1.4'
	implementation group: 'org.springframework.cloud', name: 'spring-cloud-stream-binder-kafka', version: '3.1.4'
	implementation group: 'org.springframework.kafka', name: 'spring-kafka', version: '2.7.7' 


    implementation group: 'org.json', name: 'json', version: '20190722'
    implementation group: 'org.flywaydb', name: 'flyway-core', version: '8.4.2'
    implementation('ch.qos.logback:logback-classic:1.2.3')

    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30'
    implementation group: 'org.slf4j', name: 'jcl-over-slf4j', version: '1.7.30'
    implementation group: 'org.slf4j', name: 'jul-to-slf4j', version: '1.7.30'
    implementation group: 'org.slf4j', name: 'log4j-over-slf4j', version: '1.7.30'

    implementation('ch.qos.logback:logback-core:1.2.3')
    //1.5.18
    implementation 'io.swagger:swagger-annotations:1.6.2'

	// https://mvnrepository.com/artifact/io.swagger/swagger-codegen-cli
    swaggerCodegen 'io.swagger:swagger-codegen-cli:2.4.20'

	// https://mvnrepository.com/artifact/cglib/cglib-nodep
    implementation group: 'cglib', name: 'cglib-nodep', version: '3.3.0'

	// https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-data-jpa
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: '2.5.0'

    implementation group: 'com.vladmihalcea', name: 'hibernate-types-52', version: '2.9.2'

	// https://mvnrepository.com/artifact/org.postgresql/postgresql
    implementation group: 'org.postgresql', name: 'postgresql', version: '42.2.20'

    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-vault-config', version: '3.0.3'
    
    implementation('org.springframework.boot:spring-boot-starter-web')
    // implementation('org.springframework.boot:spring-boot-starter-security')
    //implementation('org.apache.tomcat.embed:tomcat-embed-jasper:8.0.47')
	implementation('org.apache.tomcat.embed:tomcat-embed-jasper:10.0.5')

	// https://mvnrepository.com/artifact/io.springfox/springfox-swagger2
    implementation group: 'io.springfox', name: 'springfox-swagger2', version: '3.0.0'
	
    implementation('io.springfox:springfox-swagger-ui:2.9.2')
	
	// https://mvnrepository.com/artifact/org.codehaus.mojo/animal-sniffer-annotations
    implementation group: 'org.codehaus.mojo', name: 'animal-sniffer-annotations', version: '1.20'
	
	// https://mvnrepository.com/artifact/org.antlr/antlr4-runtime
    implementation group: 'org.antlr', name: 'antlr4-runtime', version: '4.9.2'

    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'

    implementation 'org.projectlombok:lombok:1.18.22'
    implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'

    implementation group: 'com.graphql-java', name: 'graphql-spring-boot-starter', version: '5.0.2'
    
	implementation (group: 'com.graphql-java', name: 'graphql-java-tools', version: '5.2.4'){
        exclude (group: 'com.fasterxml.jackson.core')
    }
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.12.3'
	
    implementation group: 'com.graphql-java', name: 'graphql-java-extended-scalars', version: '1.0'

    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.7'
	
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	
	// https://mvnrepository.com/artifact/net.minidev/json-smart
    implementation group: 'net.minidev', name: 'json-smart', version: '2.4.7'
	
	//implementation group: 'javax.validation', name: 'validation-api', version: '2.0.1.Final'
	
	// https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-vault-config
	
	//Matomo tracking 
	// https://mvnrepository.com/artifact/org.piwik.java.tracking/matomo-java-tracker
    implementation group: 'org.piwik.java.tracking', name: 'matomo-java-tracker', version: '1.6'
	
	

	//2nd level caching dependency 
	implementation 'org.springframework.boot:spring-boot-starter-cache:2.4.3'
    implementation group: 'net.sf.ehcache', name: 'ehcache', version: '2.10.4'

    testImplementation(group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: "${springBootVersion}") {
        exclude(module: 'commons-logging')
    }
	
	 testImplementation(group: 'org.spockframework', name: 'spock-core', version: '2.0-groovy-3.0') {    
        exclude(module: 'groovy-all')
    }
	
	// https://mvnrepository.com/artifact/io.cucumber/cucumber-java
    implementation group: 'io.cucumber', name: 'cucumber-java', version: '6.10.4'

    // https://mvnrepository.com/artifact/io.cucumber/cucumber-junit
    testImplementation group: 'io.cucumber', name: 'cucumber-junit', version: '6.10.4'
	
    /*testImplementation(
            'junit:junit:4.12',
            'org.codehaus.groovy:groovy-all:2.4.10',
            'info.cukes:cucumber-java:1.2.5',
            'info.cukes:cucumber-junit:1.2.5',
            'org.glassfish.jersey.media:jersey-media-json-jackson:2.14',
            'org.glassfish:javax.json:1.0.4',
            'javax.json:javax.json-api:1.0'
    )*/
    testImplementation(
            //'junit:junit:4.12',
            //'junit:junit:4.13.2',
            'org.junit.jupiter:junit-jupiter-api:5.8.0-M1',
			'org.apache.ant:ant-junit:1.10.9',
			'org.codehaus.groovy:groovy-all:3.0.8',
            //'info.cukes:cucumber-java:1.2.5',
            //'io.cukes:cucumber-java:6.10.3',
            //'info.cukes:cucumber-junit:1.2.5',
            //'io.cukes:cucumber-junit:6.10.3',
            //'org.glassfish.jersey.media:jersey-media-json-jackson:2.14',
            'org.glassfish:javax.json:1.0.4',
            'javax.json:javax.json-api:1.1.4'
    )

	implementation platform('com.amazonaws:aws-java-sdk-bom:1.11.908')
    implementation 'com.amazonaws:aws-java-sdk-s3'
    
	repositories {
        mavenLocal()
        mavenCentral()
		gradlePluginPortal()
		maven {
		  url "https://plugins.gradle.org/m2/"
		}
    }

}
