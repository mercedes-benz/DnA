/*!
 * UiLab v1.0.0
 * Copyright 2011-2020 Daimler
 */
import Popper from 'popper.js';
var makeArray = function (e) {
    return e ? [].slice.call(e) : [];
  },
  getRGB = function (e) {
    var t = e.match(/rgba?\((\d{1,3}), ?(\d{1,3}), ?(\d{1,3})\)?(?:, ?(\d(?:\.\d?))\))?/);
    return t ? { red: t[1], green: t[2], blue: t[3] } : {};
  },
  getSelectionParent = function (e) {
    var t = e.parentNode;
    return t.classList.contains('wrapper') && (t = t.parentNode), t;
  },
  setRippleAnimation = function (e, t, n) {
    void 0 === t && (t = !0);
    var a = !1;
    e.addEventListener('mousedown', function (r) {
      var i = r.target.nodeName;
      if ('INPUT' === i || 'I' === i || 'BUTTON' === i || 'A' === i) {
        r.stopPropagation(), (a = !0);
        var s = e,
          c = e.querySelector('.animation-wrapper');
        c && (s = c);
        var o = s.getBoundingClientRect(),
          l = o.width / 2,
          d = o.height / 2;
        t || ((l = r.pageX - (o.x + window.pageXOffset)), (d = r.pageY - (o.y + window.pageYOffset)));
        var u,
          p,
          f = getRGB(n || window.getComputedStyle(s).color);
        u = window.requestAnimationFrame(function e(t) {
          p || (p = t);
          var n = t - p,
            r = 'circle at ' + l + 'px ' + d + 'px',
            i = 'rgba(' + f.red + ', ' + f.green + ', ' + f.blue + ',0.3)',
            c = '100%';
          if (n < 450) {
            var o = (n / 750) * (2.5 - n / 750),
              m = a ? 0.3 : 0.3 * (1.5 - o);
            (i = 'rgba(' + f.red + ', ' + f.green + ', ' + f.blue + ', ' + m + ')'),
              (c = 90 * o + '%'),
              (s.style.backgroundImage = 'radial-gradient(' + r + ', ' + i + ' ' + c + ', transparent ' + c + ')'),
              (u = window.requestAnimationFrame(e));
          } else (s.style.backgroundImage = a ? 'radial-gradient(' + r + ', ' + i + ' ' + c + ', transparent ' + c + ')' : 'none'), window.cancelAnimationFrame(u);
        });
      }
    });
    var r = function () {
      var t = e,
        n = e.querySelector('.animation-wrapper');
      n && (t = n), (t.style.backgroundImage = 'none'), (a = !1);
    };
    e.addEventListener('mouseup', r), e.addEventListener('mouseleave', r);
  },
  getSelectionStart = function (e) {
    if (e.createTextRange) {
      var t = document.selection.createRange().duplicate();
      return t.moveEnd('character', e.value.length), '' === t.text ? e.value.length : e.value.lastIndexOf(t.text);
    }
    return e.selectionStart;
  },
  Navigation = (function () {
    function e(e) {
      (this._element = e), this.selectActiveLink(), this._addEventListeners();
    }
    var t = e.prototype;
    return (
      (t.selectActiveLink = function () {
        makeArray(this._element.querySelectorAll('a[href="' + document.location.pathname + '"]')).forEach(function (e) {
          var t = e.parentNode.parentNode.parentNode;
          t && t.classList.contains('has-sub-nav') && t.classList.add('opened');
        });
      }),
      (t.collapseAll = function () {
        makeArray(this._element.querySelectorAll('.has-sub-nav')).forEach(function (e) {
          e.classList.remove('opened');
        });
      }),
      (t.removeActive = function () {
        makeArray(this._element.querySelectorAll('.active')).forEach(function (e) {
          e.classList.remove('active');
        });
      }),
      (t._addEventListeners = function () {
        var e = this;
        makeArray(this._element.querySelectorAll('.has-sub-nav>.nav-link')).forEach(function (e) {
          e.addEventListener('click', function (e) {
            var t = e.target.parentNode;
            t.classList.contains('opened')
              ? (t.style.height = null)
              : (t.style.height = t.querySelectorAll('.nav-link').length * (t.clientHeight + 2) - 1 + 'px'),
              t.classList.toggle('opened');
          });
        }),
          makeArray(this._element.querySelectorAll('.nav-item:not(.has-sub-nav)')).forEach(function (t) {
            t.addEventListener('click', function (t) {
              e.removeActive(), t.target.parentNode.classList.add('active');
            });
          });
      }),
      e
    );
  })(),
  Button = (function () {
    function e() {}
    return (
      (e.defaultSetup = function () {
        makeArray(document.querySelectorAll('.btn:not(.btn-text)')).forEach(function (e) {
          e.classList.contains('btn-secondary')
            ? setRippleAnimation(e, !1, 'rgba(192, 200, 208, 1)')
            : e.classList.contains('btn-icon-circle')
            ? setRippleAnimation(e)
            : setRippleAnimation(e, !1);
        });
      }),
      e
    );
  })();
Button.defaultSetup();
var Select = (function () {
  function e() {}
  return (
    (e.defaultSetup = function () {
      var e,
        t,
        n,
        a,
        r,
        i,
        s = document.getElementsByClassName('custom-select');
      for (e = 0; e < s.length; e++) {
        (n = s[e].getElementsByTagName('select')[0]), (a = document.createElement('DIV'));
        var c = document.createElement('SPAN');
        c.setAttribute('class', 'label');
        var o = n.hasAttribute('multiple');
        if (((r = document.createElement('DIV')), o)) {
          var l = document.createElement('SPAN');
          l.setAttribute('class', 'values'),
            a.appendChild(l),
            a.setAttribute('class', 'select-selected multiple'),
            r.setAttribute('class', 'select-items multiple select-hide'),
            (c.innerHTML =
              '<label class="checkbox"><span class="wrapper"><input type="checkbox" value="label"/></span><span class="label">All</span></label>');
        } else
          a.setAttribute('class', 'select-selected'),
            r.setAttribute('class', 'select-items select-hide'),
            (c.innerHTML = n.options[n.selectedIndex].innerHTML);
        a.appendChild(c);
        var d = document.createElement('SPAN');
        d.setAttribute('class', 'animation-wrapper'), a.appendChild(d);
        var u = document.createElement('I');
        for (
          u.setAttribute('class', 'icon down-up-flip'),
            a.appendChild(u),
            s[e].appendChild(a),
            setRippleAnimation(a.parentNode),
            t = 0;
          t < n.length;
          t++
        ) {
          i = document.createElement('DIV');
          var p = n.options[t].innerHTML,
            f = n.options[t].value;
          o
            ? ((i.innerHTML =
                '<label class="checkbox"><span class="wrapper"><input type="checkbox" data-index="' +
                t +
                '" value="' +
                f +
                '"/></span><span class="label">' +
                p +
                '</span></label>'),
              i.addEventListener('click', function (e) {
                e.stopPropagation();
                var t = this.parentNode,
                  n = t.previousSibling.querySelector('.checkbox');
                if ('INPUT' === e.target.nodeName) {
                  var a = t.querySelectorAll('input[type="checkbox"]').length,
                    r = t.querySelectorAll('input[type="checkbox"]:checked').length,
                    i = n.querySelector('input[type="checkbox"]'),
                    s = t.parentNode.querySelector('select');
                  (i.checked = a === r),
                    i.checked ? n.classList.add('checked') : n.classList.remove('checked'),
                    (s.options[e.target.getAttribute('data-index')].selected = e.target.checked);
                }
              }))
            : (0 === t && i.setAttribute('class', 'same-as-selected'),
              (i.innerHTML = p),
              i.addEventListener('click', function () {
                var e,
                  t,
                  n,
                  a = this.parentNode.parentNode.getElementsByTagName('select')[0],
                  r = this.parentNode.previousSibling.childNodes[0];
                for (t = 0; t < a.length; t++)
                  if (a.options[t].innerHTML === this.innerHTML) {
                    for (
                      a.selectedIndex = t,
                        r.innerHTML = this.innerHTML,
                        e = this.parentNode.getElementsByClassName('same-as-selected'),
                        n = 0;
                      n < e.length;
                      n++
                    )
                      e[n].removeAttribute('class');
                    this.setAttribute('class', 'same-as-selected');
                    break;
                  }
                r.click();
              })),
            r.appendChild(i);
        }
        s[e].appendChild(r),
          a.addEventListener('click', function (e) {
            var t = e.target.parentNode,
              n = this.nextSibling;
            if ('DIV' === t.nodeName)
              e.stopPropagation(),
                h(this),
                this.nextSibling.classList.toggle('select-hide'),
                this.classList.toggle('open');
            else if ((e.stopPropagation(), 'INPUT' === e.target.nodeName)) {
              var a = n.parentNode.querySelector('select');
              makeArray(n.querySelectorAll('.checkbox')).forEach(function (t) {
                var n = t.querySelector('input[type="checkbox"]');
                e.target.checked ? t.classList.add('checked') : t.classList.remove('checked'),
                  (n.checked = e.target.checked),
                  (a.options[n.getAttribute('data-index')].selected = e.target.checked);
              });
            }
            this.classList.contains('multiple') && m(this);
          });
      }
      function m(e) {
        var t = e.nextSibling.querySelectorAll('.checkbox.checked'),
          n = e.querySelector('.values'),
          a = e.querySelector('.checkbox>.label'),
          r = [];
        makeArray(t).forEach(function (e) {
          r.push(e.querySelector('.label').innerHTML);
        }),
          r.length && !e.classList.contains('open')
            ? ((n.innerHTML = r.join(', ')), (a.style.display = 'none'))
            : ((n.innerHTML = ''), (a.style.display = ''));
      }
      function h(e) {
        var t,
          n = [],
          a = document.getElementsByClassName('select-items'),
          r = document.getElementsByClassName('select-selected');
        for (t = 0; t < r.length; t++) {
          var i = r[t];
          e === i ? n.push(t) : i.classList.remove('open'), i.classList.contains('multiple') && m(i);
        }
        for (t = 0; t < a.length; t++) n.indexOf(t) && a[t].classList.add('select-hide');
      }
      document.addEventListener('click', h);
    }),
    e
  );
})();
Select.defaultSetup();
var SelectionControl = (function () {
  function e() {}
  return (
    (e.defaultSetup = function () {
      makeArray(document.querySelectorAll('.checkbox input, .radio input, .legend input')).forEach(function (e) {
        setRippleAnimation(e.parentNode),
          'checkbox' === e.type &&
            e.addEventListener('change', function (e) {
              var t = getSelectionParent(e.target);
              e.target.checked ? t.classList.add('checked') : t.classList.remove('checked');
            });
      }),
        makeArray(document.querySelectorAll('.switch input')).forEach(function (e) {
          setRippleAnimation(e.parentNode),
            e.addEventListener('change', function (e) {
              var t = getSelectionParent(e.target);
              e.target.checked ? t.classList.add('on') : t.classList.remove('on');
            });
        }),
        makeArray(document.querySelectorAll('.legend input')).forEach(function (e) {
          e.addEventListener('change', function (e) {
            var t = getSelectionParent(e.target);
            makeArray(document.querySelectorAll('.legend input[name=' + e.target.name + ']')).forEach(function (e) {
              e.checked || getSelectionParent(e).classList.remove('active');
            }),
              t.classList.add('active');
          });
        });
    }),
    e
  );
})();
SelectionControl.defaultSetup();
var InputFields = (function () {
  function e() {}
  return (
    (e.defaultSetup = function () {
      function e(e, t) {
        var n = e.getAttribute('step-value'),
          a = parseFloat(n);
        e.focus();
        var r = parseFloat(e.value || 0);
        t ? (r -= a) : (r += a);
        var i = 0;
        -1 !== n.indexOf('.') && (i = n.split('.')[1].length), (e.value = r.toFixed(i));
      }
      makeArray(document.querySelectorAll('.input-field, .input-field-area')).forEach(function (t) {
        if (
          (t.addEventListener('focus', function (e) {
            e.target.parentNode.classList.add('focused');
          }),
          t.addEventListener('blur', function (e) {
            var t = e.target,
              n = t.parentNode;
            n.classList.remove('focused');
            var a = n.querySelector('.error-message');
            if (t.hasAttribute('required') && '' === t.value.trim()) {
              if ((n.classList.add('error'), t.hasAttribute('required-error'))) {
                var r = t.getAttribute('required-error');
                a
                  ? (a.innerHTML = r)
                  : ((a = document.createElement('SPAN')).classList.add('error-message'),
                    (a.innerHTML = r),
                    n.append(a));
              }
            } else n.classList.remove('error'), a && n.removeChild(a);
          }),
          t.classList.contains('numeric'))
        ) {
          var n = t.parentNode;
          if (t.hasAttribute('step-value')) {
            t.classList.add('has-step-value');
            var a = document.createElement('I'),
              r = document.createElement('I');
            a.classList.add('icon', 'arrow', 'up'), r.classList.add('icon', 'arrow', 'down');
            var i = document.createElement('DIV');
            i.classList.add('trigger-wrapper'),
              (i.style.top = t.offsetTop + 'px'),
              i.append(a),
              i.append(r),
              n.append(i);
            var s, c;
            r.addEventListener('mousedown', function (n) {
              n.preventDefault(),
                (c = new Date()),
                (s = setInterval(function () {
                  e(t, !0);
                }, 300));
            }),
              a.addEventListener('mousedown', function (n) {
                n.preventDefault(),
                  (c = new Date()),
                  (s = setInterval(function () {
                    e(t);
                  }, 300));
              }),
              a.addEventListener('mouseup', function () {
                clearInterval(s);
              }),
              r.addEventListener('mouseup', function () {
                clearInterval(s);
              }),
              window.addEventListener('mouseup', function () {
                clearInterval(s);
              }),
              r.addEventListener('click', function () {
                new Date().getTime() - c.getTime() < 300 && e(t, !0);
              }),
              a.addEventListener('click', function () {
                new Date().getTime() - c.getTime() < 300 && e(t);
              });
          }
          t.addEventListener('keypress', function (e) {
            (function (e, t) {
              var n = t.which ? t.which : t.keyCode,
                a = e.value.split('.');
              if (46 !== n && n > 31 && (n < 48 || n > 57)) return !1;
              if (a.length > 1 && 46 === n) return !1;
              var r = getSelectionStart(e),
                i = e.value.indexOf('.');
              return !(r > i && i > -1 && a[1].length > 1);
            })(e.target, e) || e.preventDefault();
          });
        }
      });
    }),
    (e.refresh = function () {
      makeArray(document.querySelectorAll('.has-step-value')).forEach(function (e) {
        e.parentNode.querySelector('.trigger-wrapper').style.top = e.offsetTop + 'px';
      });
    }),
    e
  );
})();
InputFields.defaultSetup();
var Tabs = (function () {
  function e(e) {
    this._element = e;
  }
  return (
    (e.defaultSetup = function () {
      var e = document.querySelectorAll('.tabs');
      function t(e) {
        e.preventDefault();
        var t = e.currentTarget,
          n = t.parentNode,
          a = n.querySelectorAll('.tab');
        makeArray(a).forEach(function (e) {
          e.classList.remove('active');
        }),
          r(n, t),
          t.classList.add('active'),
          i(t, n.parentNode.parentNode.parentNode);
      }
      function n(e) {
        var t = e.currentTarget,
          n = t.parentNode.querySelector('.tabs'),
          a = 0;
        (a = t.classList.contains('next') ? n.scrollLeft + n.clientWidth : n.scrollLeft - n.clientWidth),
          n.scroll({ left: a, behavior: 'smooth' });
      }
      function a(e, t, n) {
        t.classList.remove('hide'),
          n.classList.remove('hide'),
          e.scrollLeft
            ? e.scrollWidth - e.scrollLeft === e.clientWidth && n.classList.add('hide')
            : t.classList.add('hide');
      }
      function r(e, t, n) {
        var a = 0;
        n ? (a = 500) : (n = e.querySelector('.active-indicator'));
        var i = e.getBoundingClientRect(),
          s = t.getBoundingClientRect(),
          c = s.x - i.x + e.scrollLeft;
        (n.style.width = s.width + 'px'), (n.style.left = c + 'px');
        var o = 0,
          l = 0;
        s.left < i.left
          ? ((o = parseInt(i.left - s.left, 10)), (l = e.scrollLeft - o))
          : s.left + s.width > i.left + i.width &&
            ((o = parseInt(s.left + s.width - (i.left + i.width), 10)), (l = o ? e.scrollLeft + o : 0)),
          o &&
            setTimeout(function () {
              e.scroll({ left: l, behavior: 'smooth' }), a && r(e, t);
            }, a);
      }
      function i(e, t) {
        var n = t.querySelectorAll('.tab-content');
        makeArray(n).forEach(function (e) {
          e.classList.remove('active');
        });
        var a = e.querySelector('a').getAttribute('href');
        a && t.querySelector(a).classList.add('active'), InputFields.refresh();
      }
      makeArray(e).forEach(function (e) {
        var s = e.getElementsByClassName('tab'),
          c = document.createElement('SPAN');
        if (
          (c.setAttribute('class', 'active-indicator'),
          makeArray(s).forEach(function (n) {
            n.addEventListener('click', t),
              n.classList.contains('active') && (r(e, n, c), i(n, e.parentNode.parentNode.parentNode)),
              setRippleAnimation(n.firstChild, !1, 'rgba(192, 200, 208, 1)');
          }),
          e.scrollWidth > e.clientWidth)
        ) {
          var o = e.parentNode.parentNode,
            l = document.createElement('BUTTON');
          l.setAttribute('class', 'previous'), (l.innerHTML = '<i class="icon arrow left"></i>'), o.prepend(l);
          var d = document.createElement('BUTTON');
          d.setAttribute('class', 'next'),
            (d.innerHTML = '<i class="icon arrow right"></i>'),
            o.append(d),
            o.classList.add('scrollable'),
            setRippleAnimation(l, !0, 'rgba(0, 173, 239, 1)'),
            setRippleAnimation(d, !0, 'rgba(0, 173, 239, 1)'),
            l.addEventListener('click', n),
            d.addEventListener('click', n);
          var u = 0;
          e.addEventListener('scroll', function (e) {
            clearInterval(u),
              (u = setTimeout(function () {
                a(e.target, l, d);
              }, 100));
          }),
            a(e, l, d);
        }
        e.appendChild(c);
      });
    }),
    e
  );
})();
Tabs.defaultSetup();
var ExpansionPanel = (function () {
  function e() {}
  return (
    (e.defaultSetup = function () {
      makeArray(document.querySelectorAll('.expansion-panel input')).forEach(function (e) {
        setRippleAnimation(e.parentNode),
          'checkbox' === e.type &&
            e.addEventListener('change', function (e) {
              var t = getSelectionParent(e.target);
              e.target.checked ? t.classList.add('open') : t.classList.remove('open');
            });
      });
    }),
    e
  );
})();
ExpansionPanel.defaultSetup();
var Notification = (function () {
    function e() {}
    return (
      (e.show = function (e, t, n) {
        void 0 === t && (t = 'success'), void 0 === n && (n = 6e3);
        var a = document.createElement('DIV'),
          r = document.createElement('P'),
          i = document.createElement('I');
        i.classList.add('icon', 'close'),
          a.classList.add('notification', 'toast'),
          t && a.classList.add(t),
          (r.innerText = e),
          a.append(r),
          a.append(i),
          i.addEventListener('click', function (e) {
            e.target.parentNode.classList.add('hide');
          }),
          a.addEventListener('transitionend', function (e) {
            var t = e.target,
              n = t.parentNode;
            n &&
              t.classList.contains('hide') &&
              (n.removeChild(t),
              n.childNodes.length || n.parentNode.removeChild(n),
              n.childNodes.length > 3 && (n.firstChild.classList.remove('show'), n.firstChild.classList.add('hide')));
          });
        var s = document.getElementById('notification-wrapper');
        if (s) s.append(a), s.childNodes.length > 3 && s.firstChild.classList.add('hide');
        else {
          var c = document.createElement('DIV');
          c.setAttribute('id', 'notification-wrapper'),
            c.classList.add('notification-wrapper'),
            c.append(a),
            document.body.append(c);
        }
        setTimeout(function () {
          a.classList.add('show'), s && s.childNodes.length > 3 && a.classList.add('delay');
        }, 20),
          s &&
            s.childNodes.length > 3 &&
            setTimeout(function () {
              a.classList.remove('delay');
            }, 100),
          setTimeout(function () {
            a.classList.add('hide');
          }, n);
      }),
      e
    );
  })(),
  Tooltip = (function () {
    function e() {}
    return (
      (e.defaultSetup = function () {
        makeArray(document.querySelectorAll('[tooltip-data]')).forEach(function (e) {
          var t = null;
          e.addEventListener('mouseover', function () {
            var n = e.getAttribute('tooltip-data'),
              a = document.createElement('DIV');
            a.classList.add('tooltip'),
              (a.innerText = n),
              document.body.append(a),
              setTimeout(function () {
                a.classList.add('show');
              }, 20),
              (t = new Popper(e, a, { placement: 'top' }));
          }),
            e.addEventListener('mouseout', function () {
              var e = document.querySelector('.tooltip');
              e.parentNode.removeChild(e), t.destroy();
            });
        });
      }),
      e
    );
  })();
Tooltip.defaultSetup();
var PROGRESS_RING_RADIUS = 22.5,
  PROGRESS_RING_X_Y = 25,
  PROGRESS_BLOCK_WRAPPER_CLASS = 'progress-block-wrapper',
  PROGRESS_CLASS = 'progress',
  PROGRESS_INFINITE_CLASS = 'infinite',
  PROGRESS_DETERMINITE_CLASS = 'determinite',
  ProgressIndicator = (function () {
    function e(e) {
      (this._element = e), this.setupProgressRing();
    }
    var t = e.prototype;
    return (
      (t.setupProgressRing = function () {
        var e =
          '<circle class="progress-ring-circle" r="' +
          PROGRESS_RING_RADIUS +
          '" cx="' +
          PROGRESS_RING_X_Y +
          '" cy="' +
          PROGRESS_RING_X_Y +
          '" />';
        this._element.innerHTML = '<svg class="progress-ring">' + e + '</svg>';
      }),
      (t.setProgress = function (e) {
        var t = this._element.querySelector('circle'),
          n = 2 * t.r.baseVal.value * Math.PI;
        t.style.strokeDasharray = n + ' ' + n;
        var a = n - (e / 100) * n;
        t.style.strokeDashoffset = a;
      }),
      (e.show = function (e) {
        console.log(document.body.querySelector('.' + PROGRESS_BLOCK_WRAPPER_CLASS));
        var t = document.body.querySelector('.' + PROGRESS_BLOCK_WRAPPER_CLASS) || document.createElement('DIV');
        t.innerHTML = '';
        var n = document.createElement('DIV');
        t.classList.add(PROGRESS_BLOCK_WRAPPER_CLASS),
          n.classList.add(PROGRESS_CLASS),
          (this._element = n),
          e
            ? (n.classList.add(PROGRESS_DETERMINITE_CLASS),
              (this.determiniteProgress = new this(n)),
              this.determiniteProgress.setProgress(e))
            : n.classList.add(PROGRESS_INFINITE_CLASS),
          t.append(n),
          document.body.append(t);
      }),
      (e.setProgress = function (e) {
        this.determiniteProgress && this.determiniteProgress.setProgress(e);
      }),
      (e.hide = function () {
        var e = this._element
          ? this._element.parentNode
          : document.body.querySelector('.' + PROGRESS_BLOCK_WRAPPER_CLASS);
        e && e.classList.contains(PROGRESS_BLOCK_WRAPPER_CLASS) && e.parentNode.removeChild(e);
      }),
      e
    );
  })();
export {
  Button,
  ExpansionPanel,
  InputFields,
  Navigation,
  Notification,
  ProgressIndicator,
  Select,
  SelectionControl,
  Tabs,
  Tooltip,
};
//# sourceMappingURL=uilab.esm.min.js.map
