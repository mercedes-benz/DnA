/*!
 * UiLab v1.0.0
 * Copyright 2011-2020 Daimler
 */
!(function (e, t) {
  'object' == typeof exports && 'undefined' != typeof module
    ? (module.exports = t(require('popper.js')))
    : 'function' == typeof define && define.amd
    ? define(['popper.js'], t)
    : ((e = e || self).uilab = t(e.Popper));
})(this, function (e) {
  'use strict';
  e = e && Object.prototype.hasOwnProperty.call(e, 'default') ? e.default : e;
  var t = function (e) {
      return e ? [].slice.call(e) : [];
    },
    n = function (e) {
      var t = e.parentNode;
      return t.classList.contains('wrapper') && (t = t.parentNode), t;
    },
    a = function (e, t, n) {
      void 0 === t && (t = !0);
      var a = !1;
      e.addEventListener('mousedown', function (r) {
        var s = r.target.nodeName;
        if ('INPUT' === s || 'I' === s || 'BUTTON' === s || 'A' === s) {
          r.stopPropagation(), (a = !0);
          var i = e,
            c = e.querySelector('.animation-wrapper');
          c && (i = c);
          var o = i.getBoundingClientRect(),
            l = o.width / 2,
            d = o.height / 2;
          t || ((l = r.pageX - (o.x + window.pageXOffset)), (d = r.pageY - (o.y + window.pageYOffset)));
          var u,
            p,
            f,
            h,
            v =
              ((f = n || window.getComputedStyle(i).color),
              (h = f.match(/rgba?\((\d{1,3}), ?(\d{1,3}), ?(\d{1,3})\)?(?:, ?(\d(?:\.\d?))\))?/))
                ? { red: h[1], green: h[2], blue: h[3] }
                : {});
          u = window.requestAnimationFrame(function e(t) {
            p || (p = t);
            var n = t - p,
              r = 'circle at ' + l + 'px ' + d + 'px',
              s = 'rgba(' + v.red + ', ' + v.green + ', ' + v.blue + ',0.3)',
              c = '100%';
            if (n < 450) {
              var o = (n / 750) * (2.5 - n / 750);
              (s = 'rgba(' + v.red + ', ' + v.green + ', ' + v.blue + ', ' + (a ? 0.3 : 0.3 * (1.5 - o)) + ')'),
                (c = 90 * o + '%'),
                (i.style.backgroundImage = 'radial-gradient(' + r + ', ' + s + ' ' + c + ', transparent ' + c + ')'),
                (u = window.requestAnimationFrame(e));
            } else (i.style.backgroundImage = a ? 'radial-gradient(' + r + ', ' + s + ' ' + c + ', transparent ' + c + ')' : 'none'), window.cancelAnimationFrame(u);
          });
        }
      });
      var r = function () {
        var t = e,
          n = e.querySelector('.animation-wrapper');
        n && (t = n), (t.style.backgroundImage = 'none'), (a = !1);
      };
      e.addEventListener('mouseup', r), e.addEventListener('mouseleave', r);
    },
    r = function (e) {
      if (e.createTextRange) {
        var t = document.selection.createRange().duplicate();
        return t.moveEnd('character', e.value.length), '' === t.text ? e.value.length : e.value.lastIndexOf(t.text);
      }
      return e.selectionStart;
    },
    s = (function () {
      function e(e) {
        (this._element = e), this.selectActiveLink(), this._addEventListeners();
      }
      var n = e.prototype;
      return (
        (n.selectActiveLink = function () {
          t(this._element.querySelectorAll('a[href="' + document.location.pathname + '"]')).forEach(function (e) {
            var t = e.parentNode.parentNode.parentNode;
            t && t.classList.contains('has-sub-nav') && t.classList.add('opened');
          });
        }),
        (n.collapseAll = function () {
          t(this._element.querySelectorAll('.has-sub-nav')).forEach(function (e) {
            e.classList.remove('opened');
          });
        }),
        (n.removeActive = function () {
          t(this._element.querySelectorAll('.active')).forEach(function (e) {
            e.classList.remove('active');
          });
        }),
        (n._addEventListeners = function () {
          var e = this;
          t(this._element.querySelectorAll('.has-sub-nav>.nav-link')).forEach(function (e) {
            e.addEventListener('click', function (e) {
              var t = e.target.parentNode;
              t.classList.contains('opened')
                ? (t.style.height = null)
                : (t.style.height = t.querySelectorAll('.nav-link').length * (t.clientHeight + 2) - 1 + 'px'),
                t.classList.toggle('opened');
            });
          }),
            t(this._element.querySelectorAll('.nav-item:not(.has-sub-nav)')).forEach(function (t) {
              t.addEventListener('click', function (t) {
                e.removeActive(), t.target.parentNode.classList.add('active');
              });
            });
        }),
        e
      );
    })(),
    i = (function () {
      function e() {}
      return (
        (e.defaultSetup = function () {
          t(document.querySelectorAll('.btn:not(.btn-text)')).forEach(function (e) {
            e.classList.contains('btn-secondary')
              ? a(e, !1, 'rgba(192, 200, 208, 1)')
              : e.classList.contains('btn-icon-circle')
              ? a(e)
              : a(e, !1);
          });
        }),
        e
      );
    })();
  i.defaultSetup();
  var c = (function () {
    function e() {}
    return (
      (e.defaultSetup = function () {
        var e,
          n,
          r,
          s,
          i,
          c,
          o = document.getElementsByClassName('custom-select');
        for (e = 0; e < o.length; e++) {
          (r = o[e].getElementsByTagName('select')[0]), (s = document.createElement('DIV'));
          var l = document.createElement('SPAN');
          l.setAttribute('class', 'label');
          var d = r.hasAttribute('multiple');
          if (((i = document.createElement('DIV')), d)) {
            var u = document.createElement('SPAN');
            u.setAttribute('class', 'values'),
              s.appendChild(u),
              s.setAttribute('class', 'select-selected multiple'),
              i.setAttribute('class', 'select-items multiple select-hide'),
              (l.innerHTML =
                '<label class="checkbox"><span class="wrapper"><input type="checkbox" value="label"/></span><span class="label">All</span></label>');
          } else
            s.setAttribute('class', 'select-selected'),
              i.setAttribute('class', 'select-items select-hide'),
              (l.innerHTML = r.options[r.selectedIndex].innerHTML);
          s.appendChild(l);
          var p = document.createElement('SPAN');
          p.setAttribute('class', 'animation-wrapper'), s.appendChild(p);
          var f = document.createElement('I');
          for (
            f.setAttribute('class', 'icon down-up-flip'), s.appendChild(f), o[e].appendChild(s), a(s.parentNode), n = 0;
            n < r.length;
            n++
          ) {
            c = document.createElement('DIV');
            var h = r.options[n].innerHTML,
              v = r.options[n].value;
            d
              ? ((c.innerHTML =
                  '<label class="checkbox"><span class="wrapper"><input type="checkbox" data-index="' +
                  n +
                  '" value="' +
                  v +
                  '"/></span><span class="label">' +
                  h +
                  '</span></label>'),
                c.addEventListener('click', function (e) {
                  e.stopPropagation();
                  var t = this.parentNode,
                    n = t.previousSibling.querySelector('.checkbox');
                  if ('INPUT' === e.target.nodeName) {
                    var a = t.querySelectorAll('input[type="checkbox"]').length,
                      r = t.querySelectorAll('input[type="checkbox"]:checked').length,
                      s = n.querySelector('input[type="checkbox"]'),
                      i = t.parentNode.querySelector('select');
                    (s.checked = a === r),
                      s.checked ? n.classList.add('checked') : n.classList.remove('checked'),
                      (i.options[e.target.getAttribute('data-index')].selected = e.target.checked);
                  }
                }))
              : (0 === n && c.setAttribute('class', 'same-as-selected'),
                (c.innerHTML = h),
                c.addEventListener('click', function () {
                  var e,
                    t,
                    n,
                    a = this.parentNode.parentNode.getElementsByTagName('select')[0],
                    r = this.parentNode.previousSibling.childNodes[0];
                  for (t = 0; t < a.length; t++)
                    if (a.options[t].innerHTML === this.innerHTML) {
                      for (
                        a.selectedIndex = t,
                          r.innerHTML = this.innerHTML,
                          e = this.parentNode.getElementsByClassName('same-as-selected'),
                          n = 0;
                        n < e.length;
                        n++
                      )
                        e[n].removeAttribute('class');
                      this.setAttribute('class', 'same-as-selected');
                      break;
                    }
                  r.click();
                })),
              i.appendChild(c);
          }
          o[e].appendChild(i),
            s.addEventListener('click', function (e) {
              var n = e.target.parentNode,
                a = this.nextSibling;
              if ('DIV' === n.nodeName)
                e.stopPropagation(),
                  g(this),
                  this.nextSibling.classList.toggle('select-hide'),
                  this.classList.toggle('open');
              else if ((e.stopPropagation(), 'INPUT' === e.target.nodeName)) {
                var r = a.parentNode.querySelector('select');
                t(a.querySelectorAll('.checkbox')).forEach(function (t) {
                  var n = t.querySelector('input[type="checkbox"]');
                  e.target.checked ? t.classList.add('checked') : t.classList.remove('checked'),
                    (n.checked = e.target.checked),
                    (r.options[n.getAttribute('data-index')].selected = e.target.checked);
                });
              }
              this.classList.contains('multiple') && m(this);
            });
        }
        function m(e) {
          var n = e.nextSibling.querySelectorAll('.checkbox.checked'),
            a = e.querySelector('.values'),
            r = e.querySelector('.checkbox>.label'),
            s = [];
          t(n).forEach(function (e) {
            s.push(e.querySelector('.label').innerHTML);
          }),
            s.length && !e.classList.contains('open')
              ? ((a.innerHTML = s.join(', ')), (r.style.display = 'none'))
              : ((a.innerHTML = ''), (r.style.display = ''));
        }
        function g(e) {
          var t,
            n = [],
            a = document.getElementsByClassName('select-items'),
            r = document.getElementsByClassName('select-selected');
          for (t = 0; t < r.length; t++) {
            var s = r[t];
            e === s ? n.push(t) : s.classList.remove('open'), s.classList.contains('multiple') && m(s);
          }
          for (t = 0; t < a.length; t++) n.indexOf(t) && a[t].classList.add('select-hide');
        }
        document.addEventListener('click', g);
      }),
      e
    );
  })();
  c.defaultSetup();
  var o = (function () {
    function e() {}
    return (
      (e.defaultSetup = function () {
        t(document.querySelectorAll('.checkbox input, .radio input, .legend input')).forEach(function (e) {
          a(e.parentNode),
            'checkbox' === e.type &&
              e.addEventListener('change', function (e) {
                var t = n(e.target);
                e.target.checked ? t.classList.add('checked') : t.classList.remove('checked');
              });
        }),
          t(document.querySelectorAll('.switch input')).forEach(function (e) {
            a(e.parentNode),
              e.addEventListener('change', function (e) {
                var t = n(e.target);
                e.target.checked ? t.classList.add('on') : t.classList.remove('on');
              });
          }),
          t(document.querySelectorAll('.legend input')).forEach(function (e) {
            e.addEventListener('change', function (e) {
              var a = n(e.target);
              t(document.querySelectorAll('.legend input[name=' + e.target.name + ']')).forEach(function (e) {
                e.checked || n(e).classList.remove('active');
              }),
                a.classList.add('active');
            });
          });
      }),
      e
    );
  })();
  o.defaultSetup();
  var l = (function () {
    function e() {}
    return (
      (e.defaultSetup = function () {
        function e(e, t) {
          var n = e.getAttribute('step-value'),
            a = parseFloat(n);
          e.focus();
          var r = parseFloat(e.value || 0);
          t ? (r -= a) : (r += a);
          var s = 0;
          -1 !== n.indexOf('.') && (s = n.split('.')[1].length), (e.value = r.toFixed(s));
        }
        t(document.querySelectorAll('.input-field, .input-field-area')).forEach(function (t) {
          if (
            (t.addEventListener('focus', function (e) {
              e.target.parentNode.classList.add('focused');
            }),
            t.addEventListener('blur', function (e) {
              var t = e.target,
                n = t.parentNode;
              n.classList.remove('focused');
              var a = n.querySelector('.error-message');
              if (t.hasAttribute('required') && '' === t.value.trim()) {
                if ((n.classList.add('error'), t.hasAttribute('required-error'))) {
                  var r = t.getAttribute('required-error');
                  a
                    ? (a.innerHTML = r)
                    : ((a = document.createElement('SPAN')).classList.add('error-message'),
                      (a.innerHTML = r),
                      n.append(a));
                }
              } else n.classList.remove('error'), a && n.removeChild(a);
            }),
            t.classList.contains('numeric'))
          ) {
            var n = t.parentNode;
            if (t.hasAttribute('step-value')) {
              t.classList.add('has-step-value');
              var a = document.createElement('I'),
                s = document.createElement('I');
              a.classList.add('icon', 'arrow', 'up'), s.classList.add('icon', 'arrow', 'down');
              var i = document.createElement('DIV');
              i.classList.add('trigger-wrapper'),
                (i.style.top = t.offsetTop + 'px'),
                i.append(a),
                i.append(s),
                n.append(i);
              var c, o;
              s.addEventListener('mousedown', function (n) {
                n.preventDefault(),
                  (o = new Date()),
                  (c = setInterval(function () {
                    e(t, !0);
                  }, 300));
              }),
                a.addEventListener('mousedown', function (n) {
                  n.preventDefault(),
                    (o = new Date()),
                    (c = setInterval(function () {
                      e(t);
                    }, 300));
                }),
                a.addEventListener('mouseup', function () {
                  clearInterval(c);
                }),
                s.addEventListener('mouseup', function () {
                  clearInterval(c);
                }),
                window.addEventListener('mouseup', function () {
                  clearInterval(c);
                }),
                s.addEventListener('click', function () {
                  new Date().getTime() - o.getTime() < 300 && e(t, !0);
                }),
                a.addEventListener('click', function () {
                  new Date().getTime() - o.getTime() < 300 && e(t);
                });
            }
            t.addEventListener('keypress', function (e) {
              (function (e, t) {
                var n = t.which ? t.which : t.keyCode,
                  a = e.value.split('.');
                if (46 !== n && n > 31 && (n < 48 || n > 57)) return !1;
                if (a.length > 1 && 46 === n) return !1;
                var s = r(e),
                  i = e.value.indexOf('.');
                return !(s > i && i > -1 && a[1].length > 1);
              })(e.target, e) || e.preventDefault();
            });
          }
        });
      }),
      (e.refresh = function () {
        t(document.querySelectorAll('.has-step-value')).forEach(function (e) {
          e.parentNode.querySelector('.trigger-wrapper').style.top = e.offsetTop + 'px';
        });
      }),
      e
    );
  })();
  l.defaultSetup();
  var d = (function () {
    function e(e) {
      this._element = e;
    }
    return (
      (e.defaultSetup = function () {
        var e = document.querySelectorAll('.tabs');
        function n(e) {
          e.preventDefault();
          var n = e.currentTarget,
            a = n.parentNode,
            r = a.querySelectorAll('.tab');
          t(r).forEach(function (e) {
            e.classList.remove('active');
          }),
            i(a, n),
            n.classList.add('active'),
            c(n, a.parentNode.parentNode.parentNode);
        }
        function r(e) {
          var t = e.currentTarget,
            n = t.parentNode.querySelector('.tabs'),
            a = 0;
          (a = t.classList.contains('next') ? n.scrollLeft + n.clientWidth : n.scrollLeft - n.clientWidth),
            n.scroll({ left: a, behavior: 'smooth' });
        }
        function s(e, t, n) {
          t.classList.remove('hide'),
            n.classList.remove('hide'),
            e.scrollLeft
              ? e.scrollWidth - e.scrollLeft === e.clientWidth && n.classList.add('hide')
              : t.classList.add('hide');
        }
        function i(e, t, n) {
          var a = 0;
          n ? (a = 500) : (n = e.querySelector('.active-indicator'));
          var r = e.getBoundingClientRect(),
            s = t.getBoundingClientRect(),
            c = s.x - r.x + e.scrollLeft;
          (n.style.width = s.width + 'px'), (n.style.left = c + 'px');
          var o = 0,
            l = 0;
          s.left < r.left
            ? ((o = parseInt(r.left - s.left, 10)), (l = e.scrollLeft - o))
            : s.left + s.width > r.left + r.width &&
              ((o = parseInt(s.left + s.width - (r.left + r.width), 10)), (l = o ? e.scrollLeft + o : 0)),
            o &&
              setTimeout(function () {
                e.scroll({ left: l, behavior: 'smooth' }), a && i(e, t);
              }, a);
        }
        function c(e, n) {
          var a = n.querySelectorAll('.tab-content');
          t(a).forEach(function (e) {
            e.classList.remove('active');
          });
          var r = e.querySelector('a').getAttribute('href');
          r && n.querySelector(r).classList.add('active'), l.refresh();
        }
        t(e).forEach(function (e) {
          var o = e.getElementsByClassName('tab'),
            l = document.createElement('SPAN');
          if (
            (l.setAttribute('class', 'active-indicator'),
            t(o).forEach(function (t) {
              t.addEventListener('click', n),
                t.classList.contains('active') && (i(e, t, l), c(t, e.parentNode.parentNode.parentNode)),
                a(t.firstChild, !1, 'rgba(192, 200, 208, 1)');
            }),
            e.scrollWidth > e.clientWidth)
          ) {
            var d = e.parentNode.parentNode,
              u = document.createElement('BUTTON');
            u.setAttribute('class', 'previous'), (u.innerHTML = '<i class="icon arrow left"></i>'), d.prepend(u);
            var p = document.createElement('BUTTON');
            p.setAttribute('class', 'next'),
              (p.innerHTML = '<i class="icon arrow right"></i>'),
              d.append(p),
              d.classList.add('scrollable'),
              a(u, !0, 'rgba(0, 173, 239, 1)'),
              a(p, !0, 'rgba(0, 173, 239, 1)'),
              u.addEventListener('click', r),
              p.addEventListener('click', r);
            var f = 0;
            e.addEventListener('scroll', function (e) {
              clearInterval(f),
                (f = setTimeout(function () {
                  s(e.target, u, p);
                }, 100));
            }),
              s(e, u, p);
          }
          e.appendChild(l);
        });
      }),
      e
    );
  })();
  d.defaultSetup();
  var u = (function () {
    function e() {}
    return (
      (e.defaultSetup = function () {
        t(document.querySelectorAll('.expansion-panel input')).forEach(function (e) {
          a(e.parentNode),
            'checkbox' === e.type &&
              e.addEventListener('change', function (e) {
                var t = n(e.target);
                e.target.checked ? t.classList.add('open') : t.classList.remove('open');
              });
        });
      }),
      e
    );
  })();
  u.defaultSetup();
  var p = (function () {
      function e() {}
      return (
        (e.show = function (e, t, n) {
          void 0 === t && (t = 'success'), void 0 === n && (n = 6e3);
          var a = document.createElement('DIV'),
            r = document.createElement('P'),
            s = document.createElement('I');
          s.classList.add('icon', 'close'),
            a.classList.add('notification', 'toast'),
            t && a.classList.add(t),
            (r.innerText = e),
            a.append(r),
            a.append(s),
            s.addEventListener('click', function (e) {
              e.target.parentNode.classList.add('hide');
            }),
            a.addEventListener('transitionend', function (e) {
              var t = e.target,
                n = t.parentNode;
              n &&
                t.classList.contains('hide') &&
                (n.removeChild(t),
                n.childNodes.length || n.parentNode.removeChild(n),
                n.childNodes.length > 3 && (n.firstChild.classList.remove('show'), n.firstChild.classList.add('hide')));
            });
          var i = document.getElementById('notification-wrapper');
          if (i) i.append(a), i.childNodes.length > 3 && i.firstChild.classList.add('hide');
          else {
            var c = document.createElement('DIV');
            c.setAttribute('id', 'notification-wrapper'),
              c.classList.add('notification-wrapper'),
              c.append(a),
              document.body.append(c);
          }
          setTimeout(function () {
            a.classList.add('show'), i && i.childNodes.length > 3 && a.classList.add('delay');
          }, 20),
            i &&
              i.childNodes.length > 3 &&
              setTimeout(function () {
                a.classList.remove('delay');
              }, 100),
            setTimeout(function () {
              a.classList.add('hide');
            }, n);
        }),
        e
      );
    })(),
    f = (function () {
      function n() {}
      return (
        (n.defaultSetup = function () {
          t(document.querySelectorAll('[tooltip-data]')).forEach(function (t) {
            var n = null;
            t.addEventListener('mouseover', function () {
              var a = t.getAttribute('tooltip-data'),
                r = document.createElement('DIV');
              r.classList.add('tooltip'),
                (r.innerText = a),
                document.body.append(r),
                setTimeout(function () {
                  r.classList.add('show');
                }, 20),
                (n = new e(t, r, { placement: 'top' }));
            }),
              t.addEventListener('mouseout', function () {
                var e = document.querySelector('.tooltip');
                e.parentNode.removeChild(e), n.destroy();
              });
          });
        }),
        n
      );
    })();
  f.defaultSetup();
  return {
    Navigation: s,
    Button: i,
    Select: c,
    SelectionControl: o,
    ExpansionPanel: u,
    Tabs: d,
    InputFields: l,
    Notification: p,
    Tooltip: f,
    ProgressIndicator: (function () {
      function e(e) {
        (this._element = e), this.setupProgressRing();
      }
      var t = e.prototype;
      return (
        (t.setupProgressRing = function () {
          this._element.innerHTML =
            '<svg class="progress-ring"><circle class="progress-ring-circle" r="22.5" cx="25" cy="25" /></svg>';
        }),
        (t.setProgress = function (e) {
          var t = this._element.querySelector('circle'),
            n = 2 * t.r.baseVal.value * Math.PI;
          t.style.strokeDasharray = n + ' ' + n;
          var a = n - (e / 100) * n;
          t.style.strokeDashoffset = a;
        }),
        (e.show = function (e) {
          console.log(document.body.querySelector('.progress-block-wrapper'));
          var t = document.body.querySelector('.progress-block-wrapper') || document.createElement('DIV');
          t.innerHTML = '';
          var n = document.createElement('DIV');
          t.classList.add('progress-block-wrapper'),
            n.classList.add('progress'),
            (this._element = n),
            e
              ? (n.classList.add('determinite'),
                (this.determiniteProgress = new this(n)),
                this.determiniteProgress.setProgress(e))
              : n.classList.add('infinite'),
            t.append(n),
            document.body.append(t);
        }),
        (e.setProgress = function (e) {
          this.determiniteProgress && this.determiniteProgress.setProgress(e);
        }),
        (e.hide = function () {
          var e = this._element ? this._element.parentNode : document.body.querySelector('.progress-block-wrapper');
          e && e.classList.contains('progress-block-wrapper') && e.parentNode.removeChild(e);
        }),
        e
      );
    })(),
  };
});
//# sourceMappingURL=uilab.min.js.map
