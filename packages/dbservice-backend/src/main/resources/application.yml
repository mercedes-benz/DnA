spring:
  mvc.pathmatch.matching-strategy: ant_path_matcher
  application:
    name: dna-db-service
    version: 1.4.8
  profile:
    active: production
  kafka:
    bootstrap-servers: ${NAAS_BROKER:localhost:9092}
    properties:
      ssl:
        truststore:
          location: ${TRUSTSTORE_PATH:/XXXX/XXXX/truststore.jks}
          password: ${TRUSTSTORE_PASSWORD:XXXX}
          type: PKCS12
        keystore:
          location: ${KEYSTORE_PATH:/XXXX/XXXX/keystore.p12}
          password: ${KEYSTORE_PASSWORD:XXXX}
          type: PKCS12
      security:
        protocol: SSL
  cloud:
    vault:
      uri: ${VAULT_URI:xxxx}
      namespace: ${VAULT_NAMESPACE:xxxx}
      mountpath: ${VAULT_MOUNTPATH:xxxx}
      authentication: ${VAULT_AUTHENTICATION:xxxx}
      kubernetes:
        role: ${VAULT_ROLE:xxxx}
        service-account-token-file: ${KUBERNETES_SA_TOKEN_PATH:xxxx}
        kubernetes-path: ${VAULT_AUTH_PATH:xxxx}
      vaultpath: ${VAULT_PATH:xxxx}
      kv:
       enabled: true  
      ssl:
        enabled: false
        trust:
          store:
            path: ${CA_TRUSTSTORE_PATH:/XXXX/XXXX/truststore.p12}
            password: ${CA_TRUSTSTORE_PASSWORD:XXXX}
    stream:
      function:
        bindings:
          consume-in-0: consume2
      default-binder: kafka
      kafka:
        binder:
          brokers: ${NAAS_BROKER:hostXXXX:portXXXX}
          autoCreateTopics: true 
      bindings:
        output:
          binder: kafka
          destination: dnaChronosComparisonTopic
          content-type: text/plain
        consume2:
          binder: kafka
          destination: dnaChronosComparisonTopic
          content-type: text/plain

  flyway:
    enabled: ${FLYWAY_ENABLED:true}
    baseline-on-migrate: ${FLYWAY_BASELINE_ON_MIGRATE:true}
    baselineVersion: ${FLYWAY_BASELINEVERSION:0}
    schemas: ${FLYWAY_SCHEMA:public}   
        
  jpa:
    database: POSTGRESQL
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        temp:
          use_jdbc_metadata_defaults: false
    hibernate:
      ddl-auto: none

  datasource:
    hikari:
      connection-timeout: 4000
    platform: postgres
    url: ${API_DB_URL:jdbc:postgresql://localhost:5432/dbname}
    username: ${API_DB_USER:username_XXXXX}
    password: ${API_DB_PASS:password_XXXXX}

    driverClassName: org.postgresql.Driver
    
  servlet:
    multipart:
      max-file-size: 5MB
      max-request-size: 5MB
      
kafka:
  centralTopic:
    name: dnaCentralEventTopic
    
chronosComparison:
  uri: ${CHRONOS_COMPARISON_BASE_URI:XXXXX}

chronosMinio:
  env: ${CHRONOS_MINIO_ENVIRONMENT:dev}

databricks:
  userid: ${DATABRICKS_USERID:XXXXXX}
  userauth: ${DATABRICKS_USER_AUTH:XXXXX}
  pat: ${DATABRICKS_PAT:XXXXX}
  jobId: ${DATABRICKS_JOBID:XXXXX}
  powerfulMachinesJobId: ${DATABRICKS_POWERFULMACHINESJOBID:XXXXX}
  defaultConfigYml: ${DATABRICKS_DEFAULTCONFIGYML_PATH:chronos-core/objects?prefix=configs/}
  runsDefaultPageSize: ${DATABRICKS_RUNSDEFAULTPAGESIZE_PATH:15}
  uri:
    base: ${DATABRICKS_BASE_URI:XXXXX}
    runnow: ${DATABRICKS_RUNNOW_URI:/api/2.1/jobs/run-now}
    deleterun: ${DATABRICKS_DELETERUN_URI:/api/2.1/jobs/runs/delete}
    getrun: ${DATABRICKS_GETRUN_URI:/api/2.1/jobs/runs/get}
    cancelrun: ${DATABRICKS_CANCELRUN_URI:/api/2.1/jobs/runs/cancel}
    jobrunlist: ${DATABRICKS_JOBRUNLIST_URI:/api/2.1/jobs/get}
    jobrunoutput: ${DATABRICKS_GETRUNOUTPUT_URI:/api/2.1/jobs/runs/get-output}
    
dna:
  uri: ${DNA_URI:XXXXXX}

server:
  port: 8989

storage.uri : ${STORAGE_API_BASE_URL:XXXXXX}
technicalUser: ${TECH_USER:XXXXXX}

#Cors Filter origin Domains  
allowedCorsOriginPatternUrl: ${CORS_ORIGIN_URL:http://*}

swagger.headers.authorization.token: ${SWAGGER_HEADER_AUTH:XXXXXX}
swagger.headers.authorization.appId: ${SWAGGER_HEADER_AUTH_APPID:XXXXXX}
swagger.headers.authorization.apiKey: ${SWAGGER_HEADER_AUTH_APPKEY:XXXXXX}
management.endpoints.web.exposure.include: loggers,health
management.endpoint.loggers.enabled: true
management.endpoint.health.probes.enabled: true
management.endpoint.health.show-details: always

proxy: 
  port: ${CUSTOMPROXY_PORT:XXXX}
  host: ${CUSTOMPROXY_HOST:XXXX}
  
logging:
  service:
    environment: ${LOGGING_ENVIRONMENT:DEV}
    path: ${LOGGING_PATH:/var/log}
  level:
    com:
      daimler:
        data:
          application: INFO
          controller.ItsmmGameController: DEBUG
    org.springframework.boot.autoconfigure.logging: INFO
    com.daimler.data.application.logging.ApplicationLoggingAspect: DEBUG
    org:
      springframework:
        web:
          client:
            RestTemplate: INFO
      hibernate:
        type:
          descriptor:
            sql: ERROR
